/*Table structure for table `article_category` */
DROP TABLE IF EXISTS `article_category`;
CREATE TABLE `article_category` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `PID` BIGINT(64) DEFAULT NULL COMMENT '上级类别编号',
  `NAME` VARCHAR(50) NOT NULL COMMENT '类别名称',
  `IMAGE_URL` VARCHAR(1000) NOT NULL DEFAULT '' COMMENT '分类预览图',
  `DESC` VARCHAR(1000) NOT NULL DEFAULT '' COMMENT '分类描述',
  `SORT` INT(11) NOT NULL DEFAULT 99999 COMMENT '排序字段',
  `ENABLED` TINYINT(1) DEFAULT 1 COMMENT '是否启用',
  `DELETED` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '是否删除',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE,
  KEY `INDEX_KEY_PID` (`PID`),
  KEY `INDEX_KEY_NAME` (`NAME`),
  KEY `INDEX_KEY_ENABLED` (`ENABLED`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='文章分类表';

/*Data for the table `article_category` */
INSERT INTO article_category (ID, PID, NAME, IMAGE_URL, `DESC`, SORT, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (1, null, '技术总结', '', '', 1, 1, 0, 1, 'admin', '2021-02-28 21:29:11', '2021-02-28', '', '');
INSERT INTO article_category (ID, PID, NAME, IMAGE_URL, `DESC`, SORT, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (2, 1, '后端技术', '', '', 10, 1, 0, 1, 'admin', '2021-02-28 21:29:11', '2021-02-28', '', '');
INSERT INTO article_category (ID, PID, NAME, IMAGE_URL, `DESC`, SORT, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3, 1, '前端技术', '', '', 11, 1, 0, 1, 'admin', '2021-02-28 21:29:11', '2021-02-28', '', '');
INSERT INTO article_category (ID, PID, NAME, IMAGE_URL, `DESC`, SORT, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (4, 1, '工具运维', '', '', 12, 1, 0, 1, 'admin', '2021-02-28 21:29:11', '2021-02-28', '', '');
INSERT INTO article_category (ID, PID, NAME, IMAGE_URL, `DESC`, SORT, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (5, 1, '数据库', '', '', 13, 1, 0, 1, 'admin', '2021-02-28 21:29:11', '2021-02-28', '', '');
INSERT INTO article_category (ID, PID, NAME, IMAGE_URL, `DESC`, SORT, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (6, null, '学习笔记', '', '', 2, 1, 0, 1, 'admin', '2021-02-28 21:29:11', '2021-02-28', '', '');
INSERT INTO article_category (ID, PID, NAME, IMAGE_URL, `DESC`, SORT, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (7, 6, '问题记录', '', '', 20, 1, 0, 1, 'admin', '2021-02-28 21:29:11', '2021-02-28', '', '');
INSERT INTO article_category (ID, PID, NAME, IMAGE_URL, `DESC`, SORT, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (8, 6, '源码学习', '', '', 21, 1, 0, 1, 'admin', '2021-02-28 21:29:11', '2021-02-28', '', '');
INSERT INTO article_category (ID, PID, NAME, IMAGE_URL, `DESC`, SORT, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (9, 6, '力扣笔记', '', '', 22, 1, 0, 1, 'admin', '2021-02-28 21:29:11', '2021-02-28', '', '');
INSERT INTO article_category (ID, PID, NAME, IMAGE_URL, `DESC`, SORT, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (10, null, '生活记录', '', '', 3, 1, 0, 1, 'admin', '2021-02-28 21:29:11', '2021-02-28', '', '');
INSERT INTO article_category (ID, PID, NAME, IMAGE_URL, `DESC`, SORT, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (11, 10, '散文随笔', '', '', 31, 1, 0, 1, 'admin', '2021-02-28 21:29:11', '2021-02-28', '', '');
INSERT INTO article_category (ID, PID, NAME, IMAGE_URL, `DESC`, SORT, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (12, 10, '旅游杂记', '', '', 32, 1, 0, 1, 'admin', '2021-02-28 21:29:11', '2021-02-28', '', '');

/*Table structure for table `article_tag` */
DROP TABLE IF EXISTS `article_tag`;
CREATE TABLE `article_tag` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `NAME` VARCHAR(50) NOT NULL COMMENT '标签名称',
  `TYPE` TINYINT(1) NOT NULL COMMENT '标签类型',
  `ENABLED` TINYINT(1) DEFAULT 1 COMMENT '是否启用',
  `DELETED` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '是否删除',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE,
  KEY `INDEX_KEY_TYPE` (`TYPE`),
  KEY `INDEX_KEY_NAME` (`NAME`),
  KEY `INDEX_KEY_ENABLED` (`ENABLED`),
  KEY `INDEX_KEY_CREATE_USER` (`CREATE_USER`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='文章标签表';

/*Data for the table `article_tag` */
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940736, 'Java', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940737, 'Python', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940738, 'Shell', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940739, 'Spring', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940740, 'SpringBoot', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940741, 'SpringCloud', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940742, '多线程', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940743, '并发', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940744, '反射', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940745, '集合', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940746, 'JVM', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940747, 'IO', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940748, 'MySQL', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940749, '达梦', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940750, 'Oracle', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940751, 'Redis', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940752, 'AWT', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940753, 'Swing', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940754, 'Linux', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940755, 'Html', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940756, 'Css', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940757, 'JavaScript', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940758, 'Vue', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940759, 'Vue2', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940760, 'Vue3', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940761, 'JQuery', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940762, 'Bootstrap', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940763, 'Tomcat', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940764, 'Echarts', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940765, 'Java关键字', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940766, 'LeeCode', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940767, '算法', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940768, '数据结构', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940769, '数学', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940770, '面试题', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940771, '工具', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940772, '旅游', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940773, '随笔', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940774, '散文', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940775, '笔记', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3538598210605940776, '生活', 1, 1, 0, 1, 'admin', '2021-03-01 00:58:53', '2021-03-01', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564976111286747136, 'Linux命令', 2, 1, 0, 1, 'suntao', '2023-02-16 11:02:18', '2023-02-16', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565018355976896512, 'BootstrapTable', 2, 1, 0, 1, 'suntao', '2023-02-16 13:50:10', '2023-02-16', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565034053830705152, 'HTTPS', 2, 1, 0, 1, 'suntao', '2023-02-16 14:52:33', '2023-02-16', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565034054128500736, 'SSL部署', 2, 1, 0, 1, 'suntao', '2023-02-16 14:52:33', '2023-02-16', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565041742279344128, '网站公告', 2, 1, 0, 1, 'suntao', '2023-02-16 15:23:06', '2023-02-16', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565059779191635968, 'Expect脚本', 2, 1, 0, 1, 'suntao', '2023-02-16 16:34:46', '2023-02-16', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565059780437344256, '服务器互信', 2, 1, 0, 1, 'suntao', '2023-02-16 16:34:47', '2023-02-16', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565069682580914176, 'XShell', 2, 1, 0, 1, 'suntao', '2023-02-16 17:14:08', '2023-02-16', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565116305122000896, 'String', 2, 1, 0, 1, 'suntao', '2023-02-16 20:19:23', '2023-02-16', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565173780227555328, 'Bug', 2, 1, 0, 1, 'suntao', '2023-02-17 00:07:46', '2023-02-17', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565181767377747968, 'MultipartFile', 2, 1, 0, 1, 'suntao', '2023-02-17 00:39:31', '2023-02-17', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565184558049525760, '源码', 2, 1, 0, 1, 'suntao', '2023-02-17 00:50:36', '2023-02-17', '', '');
INSERT INTO article_tag (ID, NAME, TYPE, ENABLED, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565196717458456576, 'Java异常', 2, 1, 0, 1, 'suntao', '2023-02-17 01:38:55', '2023-02-17', '', '');

/*Table structure for table `article_tag_relation` */
DROP TABLE IF EXISTS `article_tag_relation`;
CREATE TABLE `article_tag_relation` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `ARTICLE_ID` BIGINT(64) NOT NULL COMMENT '文章编号',
  `TAG_ID` BIGINT(64) NOT NULL COMMENT '标签编号',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE,
  UNIQUE KEY `KEY_ARTICLE_TAG` (`ARTICLE_ID`, `TAG_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='文章标签关联表';

/*Data for the table `article_tag_relation` */
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564830298057211904, 3564818823385186304, 3538598210605940776, 1, 'zhaoxiaorong', '2023-02-16 01:22:54', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564830298241761280, 3564818823385186304, 3538598210605940773, 1, 'zhaoxiaorong', '2023-02-16 01:22:54', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564833116830826496, 3564830787930947584, 3538598210605940773, 1, 'zhaoxiaorong', '2023-02-16 01:34:06', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564833117053124608, 3564830787930947584, 3538598210605940774, 1, 'zhaoxiaorong', '2023-02-16 01:34:06', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564840388231430144, 3564834737765744640, 3538598210605940773, 1, 'zhaoxiaorong', '2023-02-16 02:03:00', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564840388428562432, 3564834737765744640, 3538598210605940774, 1, 'zhaoxiaorong', '2023-02-16 02:03:00', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564844588487147520, 3564840924133457920, 3538598210605940776, 1, 'zhaoxiaorong', '2023-02-16 02:19:41', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564844588684279808, 3564840924133457920, 3538598210605940772, 1, 'zhaoxiaorong', '2023-02-16 02:19:41', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564976111903309824, 3564818823385186305, 3538598210605940754, 1, 'suntao', '2023-02-16 11:02:19', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564976112117219328, 3564818823385186305, 3538598210605940738, 1, 'suntao', '2023-02-16 11:02:19', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564976112343711744, 3564818823385186305, 3564976111286747136, 1, 'suntao', '2023-02-16 11:02:19', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564990034572476416, 3564830787930947585, 3538598210605940748, 1, 'suntao', '2023-02-16 11:57:38', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565019080735850496, 3564830787930947586, 3538598210605940762, 1, 'suntao', '2023-02-16 13:53:03', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565019080932982784, 3564830787930947586, 3565018355976896512, 1, 'suntao', '2023-02-16 13:53:03', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565034054522765312, 3564830787930947587, 3565034053830705152, 1, 'suntao', '2023-02-16 14:52:33', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565034054715703296, 3564830787930947587, 3565034054128500736, 1, 'suntao', '2023-02-16 14:52:33', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565042278705659904, 3564830787930947588, 3565041742279344128, 1, 'suntao', '2023-02-16 15:25:14', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565042278906986496, 3564830787930947588, 3538598210605940773, 1, 'suntao', '2023-02-16 15:25:14', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565065637090820096, 3564834737765744641, 3565059779191635968, 1, 'suntao', '2023-02-16 16:58:03', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565065637308923904, 3564834737765744641, 3565059780437344256, 1, 'suntao', '2023-02-16 16:58:03', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565065637514444800, 3564834737765744641, 3538598210605940738, 1, 'suntao', '2023-02-16 16:58:03', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565069683986006016, 3564834737765744642, 3565069682580914176, 1, 'suntao', '2023-02-16 17:14:08', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565082885687869440, 3565070887185022976, 3565041742279344128, 1, 'suntao', '2023-02-16 18:06:35', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565082885876613120, 3565070887185022976, 3538598210605940773, 1, 'suntao', '2023-02-16 18:06:36', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565092332241944576, 3564818823385182105, 3565041742279344128, 1, 'suntao', '2023-02-16 18:44:08', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565092332434882560, 3564818823385182105, 3538598210605940773, 1, 'suntao', '2023-02-16 18:44:08', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565103621357961216, 3565093233077780480, 3538598210605940736, 1, 'suntao', '2023-02-16 19:28:59', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565103621550899200, 3565093233077780480, 3538598210605940770, 1, 'suntao', '2023-02-16 19:28:59', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565105533125918720, 3565103637518614528, 3538598210605940736, 1, 'suntao', '2023-02-16 19:36:35', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565105533331439616, 3565103637518614528, 3538598210605940770, 1, 'suntao', '2023-02-16 19:36:35', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565109076524269568, 3565106295742660608, 3538598210605940736, 1, 'suntao', '2023-02-16 19:50:40', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565109076721401856, 3565106295742660608, 3538598210605940770, 1, 'suntao', '2023-02-16 19:50:40', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565113979808251904, 3565109443005775872, 3538598210605940765, 1, 'suntao', '2023-02-16 20:10:09', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565113980005384192, 3565109443005775872, 3538598210605940736, 1, 'suntao', '2023-02-16 20:10:09', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565113980202516480, 3565109443005775872, 3538598210605940770, 1, 'suntao', '2023-02-16 20:10:09', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565116305621123072, 3565114366674075648, 3538598210605940736, 1, 'suntao', '2023-02-16 20:19:23', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565116305830838272, 3565114366674075648, 3538598210605940770, 1, 'suntao', '2023-02-16 20:19:23', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565116306027970560, 3565114366674075648, 3565116305122000896, 1, 'suntao', '2023-02-16 20:19:24', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565122347897716736, 3565118053739921408, 3538598210605940736, 1, 'suntao', '2023-02-16 20:43:24', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565122348086460416, 3565118053739921408, 3538598210605940770, 1, 'suntao', '2023-02-16 20:43:24', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565126882527543296, 3565122601854435328, 3538598210605940736, 1, 'suntao', '2023-02-16 21:01:25', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565126882733064192, 3565122601854435328, 3538598210605940770, 1, 'suntao', '2023-02-16 21:01:25', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565128865745469440, 3565127273520562176, 3538598210605940736, 1, 'suntao', '2023-02-16 21:09:18', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565128865950990336, 3565127273520562176, 3538598210605940768, 1, 'suntao', '2023-02-16 21:09:18', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565128866160705536, 3565127273520562176, 3538598210605940770, 1, 'suntao', '2023-02-16 21:09:18', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565133638066503680, 3565129201528864768, 3538598210605940736, 1, 'suntao', '2023-02-16 21:28:16', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565133638280413184, 3565129201528864768, 3538598210605940770, 1, 'suntao', '2023-02-16 21:28:16', '2023-02-16', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565173781523595264, 3565155039951454208, 3565173780227555328, 1, 'suntao', '2023-02-17 00:07:47', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565173782526033920, 3565155039951454208, 3538598210605940754, 1, 'suntao', '2023-02-17 00:07:47', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565178801937711104, 3565174241831682048, 3538598210605940736, 1, 'suntao', '2023-02-17 00:27:44', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565181767763623936, 3565179076987584512, 3565181767377747968, 1, 'suntao', '2023-02-17 00:39:31', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565181767964950528, 3565179076987584512, 3538598210605940736, 1, 'suntao', '2023-02-17 00:39:31', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565186579930546176, 3565182063764045824, 3538598210605940736, 1, 'suntao', '2023-02-17 00:58:38', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565186580127678464, 3565182063764045824, 3538598210605940770, 1, 'suntao', '2023-02-17 00:58:38', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565186580329005056, 3565182063764045824, 3565184558049525760, 1, 'suntao', '2023-02-17 00:58:38', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565190785060044800, 3565187224347607040, 3538598210605940736, 1, 'suntao', '2023-02-17 01:15:21', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565190785257177088, 3565187224347607040, 3538598210605940770, 1, 'suntao', '2023-02-17 01:15:21', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565193510879494144, 3565191236677533696, 3538598210605940746, 1, 'suntao', '2023-02-17 01:26:11', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565193511076626432, 3565191236677533696, 3538598210605940736, 1, 'suntao', '2023-02-17 01:26:11', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565193511277953024, 3565191236677533696, 3538598210605940770, 1, 'suntao', '2023-02-17 01:26:11', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565195334030196736, 3565194084098244608, 3538598210605940746, 1, 'suntao', '2023-02-17 01:33:25', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565195334214746112, 3565194084098244608, 3538598210605940736, 1, 'suntao', '2023-02-17 01:33:25', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565195334424461312, 3565194084098244608, 3538598210605940770, 1, 'suntao', '2023-02-17 01:33:25', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565196717949190144, 3565195624078901248, 3538598210605940736, 1, 'suntao', '2023-02-17 01:38:55', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565196718137933824, 3565195624078901248, 3538598210605940770, 1, 'suntao', '2023-02-17 01:38:55', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565196718326677504, 3565195624078901248, 3565196717458456576, 1, 'suntao', '2023-02-17 01:38:55', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565201246178508800, 3565197022904451072, 3538598210605940746, 1, 'suntao', '2023-02-17 01:56:55', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565201246384029696, 3565197022904451072, 3538598210605940736, 1, 'suntao', '2023-02-17 01:56:55', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565201246581161984, 3565197022904451072, 3538598210605940770, 1, 'suntao', '2023-02-17 01:56:55', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565217244843606016, 3565201754909835264, 3565041742279344128, 1, 'suntao', '2023-02-17 03:00:29', '2023-02-17', '', '');
INSERT INTO article_tag_relation (ID, ARTICLE_ID, TAG_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565217245057515520, 3565201754909835264, 3538598210605940773, 1, 'suntao', '2023-02-17 03:00:29', '2023-02-17', '', '');


/*Table structure for table `article_column` */
DROP TABLE IF EXISTS `article_column`;
CREATE TABLE `article_column` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `NAME` VARCHAR(50) NOT NULL COMMENT '栏目名称',
  `IMAGE_URL` VARCHAR(1000) NOT NULL DEFAULT '' COMMENT '栏目预览图',
  `DESC` VARCHAR(1000) NOT NULL DEFAULT '' COMMENT '栏目描述',
  `SORT` INT(11) NOT NULL DEFAULT 99999 COMMENT '排序字段',
  `ENABLED` TINYINT(1) DEFAULT 1 COMMENT '是否启用',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE,
  KEY `INDEX_KEY_NAME` (`NAME`),
  KEY `INDEX_KEY_ENABLED` (`ENABLED`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='文章栏目表';

/*Table structure for table `article_column_relation` */
DROP TABLE IF EXISTS `article_column_relation`;
CREATE TABLE `article_column_relation` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `ARTICLE_ID` BIGINT(64) NOT NULL COMMENT '文章编号',
  `COLUMN_ID` BIGINT(64) NOT NULL COMMENT '栏目编号',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE,
  UNIQUE KEY `KEY_ARTICLE_COLUMN` (`ARTICLE_ID`, `COLUMN_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='文章栏目关联表';

/*Table structure for table `article_img_relation` */
DROP TABLE IF EXISTS `article_img_relation`;
CREATE TABLE `article_img_relation` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `ARTICLE_ID` BIGINT(64) NOT NULL COMMENT '文章编号',
  `FILE_ID` BIGINT(64) NOT NULL COMMENT '文件编号',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE,
  UNIQUE KEY `KEY_ARTICLE_TAG` (`ARTICLE_ID`, `FILE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='文章封面关联表';

/*Data for the table `article_img_relation` */
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564830297457426432, 3564818823385186304, 3564819588942135296, 1, 'zhaoxiaorong', '2023-02-16 01:22:54', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564833115186659328, 3564830787930947584, 3564833096647835648, 1, 'zhaoxiaorong', '2023-02-16 01:34:06', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564840386666954752, 3564834737765744640, 3564840369885544448, 1, 'zhaoxiaorong', '2023-02-16 02:02:59', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564844587711201280, 3564840924133457920, 3564844442076577792, 1, 'zhaoxiaorong', '2023-02-16 02:19:41', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564976110376583168, 3564818823385186305, 3564976088905940992, 1, 'suntao', '2023-02-16 11:02:18', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3564990033440014336, 3564830787930947585, 3564980986380812288, 1, 'suntao', '2023-02-16 11:57:38', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565019080123482112, 3564830787930947586, 3565019063048470528, 1, 'suntao', '2023-02-16 13:53:03', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565034053532909568, 3564830787930947587, 3565033888134725632, 1, 'suntao', '2023-02-16 14:52:33', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565042278089097216, 3564830787930947588, 3565041592978898944, 1, 'suntao', '2023-02-16 15:25:14', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565065636163878912, 3564834737765744641, 3565065607873298432, 1, 'suntao', '2023-02-16 16:58:03', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565069682257952768, 3564834737765744642, 3565069527563632640, 1, 'suntao', '2023-02-16 17:14:08', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565082884228251648, 3565070887185022976, 3565082682587086848, 1, 'suntao', '2023-02-16 18:06:35', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565092331650547712, 3564818823385182105, 3565090167188357120, 1, 'suntao', '2023-02-16 18:44:08', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565103620770758656, 3565093233077780480, 3565103605889368064, 1, 'suntao', '2023-02-16 19:28:59', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565105532492578816, 3565103637518614528, 3565105378435792896, 1, 'suntao', '2023-02-16 19:36:35', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565109074582306816, 3565106295742660608, 3565107883223810048, 1, 'suntao', '2023-02-16 19:50:39', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565113979099414528, 3565109443005775872, 3565110506047930368, 1, 'suntao', '2023-02-16 20:10:09', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565116304731930624, 3565114366674075648, 3565116282464370688, 1, 'suntao', '2023-02-16 20:19:23', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565122347327291392, 3565118053739921408, 3565119232628752384, 1, 'suntao', '2023-02-16 20:43:24', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565126881902592000, 3565122601854435328, 3565123792411820032, 1, 'suntao', '2023-02-16 21:01:25', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565128865003077632, 3565127273520562176, 3565128369844518912, 1, 'suntao', '2023-02-16 21:09:18', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565133637403803648, 3565129201528864768, 3565130116809883648, 1, 'suntao', '2023-02-16 21:28:16', '2023-02-16', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565173779799736320, 3565155039951454208, 3565173752540954624, 1, 'suntao', '2023-02-17 00:07:46', '2023-02-17', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565178801434394624, 3565174241831682048, 3565178799890890752, 1, 'suntao', '2023-02-17 00:27:44', '2023-02-17', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565186579234291712, 3565182063764045824, 3565186561790181376, 1, 'suntao', '2023-02-17 00:58:38', '2023-02-17', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565190784460259328, 3565187224347607040, 3565190740160020480, 1, 'suntao', '2023-02-17 01:15:21', '2023-02-17', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565193510183239680, 3565191236677533696, 3565193491694747648, 1, 'suntao', '2023-02-17 01:26:10', '2023-02-17', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565195333359108096, 3565194084098244608, 3565194452936949760, 1, 'suntao', '2023-02-17 01:33:25', '2023-02-17', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565196717064192000, 3565195624078901248, 3565196677855838208, 1, 'suntao', '2023-02-17 01:38:55', '2023-02-17', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565201245461282816, 3565197022904451072, 3565201223227277312, 1, 'suntao', '2023-02-17 01:56:55', '2023-02-17', '', '');
INSERT INTO article_img_relation (ID, ARTICLE_ID, FILE_ID, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3565217244197683200, 3565201754909835264, 3565217156285071360, 1, 'suntao', '2023-02-17 03:00:29', '2023-02-17', '', '');

/*Table structure for table `article` */
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `TITLE` VARCHAR(100) NOT NULL COMMENT '文章标题',
  `REMARK` VARCHAR(250) NOT NULL DEFAULT '' COMMENT '文章概要',
  `CONTENT` TEXT NOT NULL COMMENT '文章内容: 65535 / 16,777,215',
  `CONTENT_MD` TEXT COMMENT '文章内容_Markdown',
  `KEYWORDS` VARCHAR(200) NOT NULL DEFAULT '' COMMENT '文章关键字',
  `REPRINT_LINK` VARCHAR(1000) DEFAULT NULL COMMENT '原文地址',
  `REPRINT_DESC` VARCHAR(1000) NOT NULL DEFAULT '' COMMENT '转载说明',
  `COVER_IMAGE_TYPE` INT(2) NOT NULL COMMENT '封面类型',
  `ARTICLE_TYPE` INT(2) NOT NULL COMMENT '文章类型',
  `ARTICLE_STATUS` INT(2) DEFAULT NULL COMMENT '文章状态',
  `ARTICLE_PERM` INT(2) DEFAULT NULL COMMENT '文章权限',
  `CATEGORY_ID` BIGINT(64) DEFAULT NULL COMMENT '文章分类',
  `AUTHOR_ID` BIGINT(64) NOT NULL COMMENT '文章作者',
  `COMMENT_FLAG` TINYINT(1) DEFAULT 1 COMMENT '是否允许评论',
  `DESC` VARCHAR(100) NOT NULL DEFAULT '' COMMENT '其他信息',
  `DELETED` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '是否删除',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  `EXTEND1` VARCHAR(200) DEFAULT NULL COMMENT '扩展字段一：编辑器类型：1-WangEditor; 2-Markdown',
  `EXTEND2` VARCHAR(200) DEFAULT NULL COMMENT '扩展字段二：文章字数',
  `EXTEND3` VARCHAR(200) DEFAULT NULL COMMENT '扩展字段三',
  `EXTEND4` VARCHAR(200) DEFAULT NULL COMMENT '扩展字段四',
  `EXTEND5` VARCHAR(200) DEFAULT NULL COMMENT '扩展字段五',
  PRIMARY KEY (`ID`) USING BTREE,
  KEY `INDEX_KEY_TITLE` (`TITLE`),
  KEY `INDEX_KEY_CATEGORY_ID` (`CATEGORY_ID`),
  KEY `INDEX_KEY_ARTICLE_TYPE` (`ARTICLE_TYPE`),
  KEY `INDEX_KEY_ARTICLE_STATUS` (`ARTICLE_STATUS`),
  KEY `INDEX_KEY_ARTICLE_PERM` (`ARTICLE_PERM`),
  KEY `INDEX_KEY_AUTHOR_ID` (`AUTHOR_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='文章表';

/*Data for the table `article` */
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3564818823385182105, '网站 1.0 上线公告', '网站 1.0 上线公告', '<p style="text-indent: 2em;"><span style="font-family: 宋体;">孙涛个人博客终于在今天 </span><span style="color: rgb(225, 60, 57); font-family: 宋体;"><strong>2021-03-21</strong></span><span style="font-family: 宋体;"> 上线，从第一份代码提交 </span><span style="color: rgb(225, 60, 57); font-family: 宋体;"><strong>2020-08-24</strong></span><span style="font-family: 宋体;"> 到现在差不多 100 次的提交记录，终于上线了，访问网址：</span><span style="color: rgb(66, 144, 247); font-family: 宋体;">http://www.suntaoblog.com</span><span style="font-family: 宋体;">。</span></p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565089219946741760.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565089219946741760.png" style=""/></p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565089679122366464.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565089679122366464.png" style=""/></p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565091707701690368.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565091707701690368.png" style=""/></p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565091809107378176.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565091809107378176.png" style=""/></p><p style="text-indent: 2em;"><span style="font-family: 宋体;">由于只上线了必要功能，基础功能还不完善，项目</span><span style="font-family: 宋体;"><strong>暂不开源</strong></span><span style="font-family: 宋体;">，预计在进行前后端分离改造后，进行项目开源。</span></p>', '孙涛个人博客终于在今天2021-03-21上线，从第一份代码提交2020-08-24到现在差不多100次的提交记录，终于上线了，访问网址：http://www.suntaoblog.com。由于只上线了必要功能，基础功能还不完善，项目暂不开源，预计在进行前后端分离改造后，进行项目开源。', '随笔,网站公告', '', '', 1, 1, 5, 1, 11, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-03-21 05:18:21', '2021-03-21', '', '', '1', '149', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3564818823385186304, '恰如灯下，故人万里，归来对影', '大浪淘沙，荣辱不惊', '<p> &nbsp; &nbsp; &nbsp; &nbsp;辛丑牛年农历二月十二日，孙先生个人博客网站1.1版本上线，十分荣幸能做访问第一人。从初步构思到网站建成期间，种种成长我都有幸与孙先生一起见证，遂总有种荣辱与共之感！孙先生做此网站的初衷是认真记录生活，交流分享经验，促进共同进步。本人会在随记中不定时更新一些历史小故事，不辜负孙先生特意辟出的随记板块。</p><p><br></p><p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;望大浪淘沙后，荣辱不惊！</p>', '辛丑牛年农历二月十二日，孙先生个人博客网站1.1版本上线，十分荣幸能做访问第一人。从初步构思到网站建成期间，种种成长我都有幸与孙先生一起见证，遂总有种荣辱与共之感！孙先生做此网站的初衷是认真记录生活，交流分享经验，促进共同进步。本人会在随记中不定时更新一些历史小故事，不辜负孙先生特意辟出的随记板块。望大浪淘沙后，荣辱不惊！', '随笔,生活', '', '', 1, 1, 5, 1, 11, 3564729154333048832, 1, '审核通过', 0, 1, 'zhaoxiaorong', '2021-03-24 02:32:52', '2021-03-24', 'zhaoxiaorong', '2023-02-16 01:22:54', '1', '290', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3564818823385186305, 'wget 下载目录对象到服务器指定目录，并且不包含服务器路径', 'wget 下载目录对象到服务器指定目录，并且不包含服务器路径', '<blockquote><span style="font-family: 宋体;">在Linux操作中，经常会使用 wget 命令，当使用其下载目录时，会碰到各种问题，在这里总结记录下</span></blockquote><p><span style="font-family: 宋体;">wget下载网站目录到服务器指定目录的命令如下：</span></p><pre><code class="language-bash"><span style="font-family: 宋体;">wget http://10.90.193.195/fanghuwang/Tools/ZenithGoDriver/R22C00RR1/arm/ -r -np -nH --cut-dirs 6 -P /tmp/zenith -E -R html -o /tmp/wgetZenith.log</span></code></pre><p><span style="font-family: 宋体;"><strong>参数解析：</strong></span></p><ul><li><span style="font-family: 宋体;">-r：递归下载，下载目录时使用</span></li><li><span style="font-family: 宋体;">-np：不要下载父目录</span></li><li><span style="font-family: 宋体;">-nH：不要创建主机目录，下载目录一般不希望创建主机目录的（一般为Host）</span></li><li><span style="font-family: 宋体;">--cut-dirs number：忽略的远程目录数，当希望没有远程目录时，可以设置尽量大</span></li><li><span style="font-family: 宋体;">-P：下载内容在服务器上的保存目录</span></li><li><span style="font-family: 宋体;">-E -R html：忽略 html 形式的文件（否则会携带一些无用的 index.html 等文件）</span></li><li><span style="font-family: 宋体;">-o：日志输出文件</span></li></ul><p><br></p>', '在Linux操作中，经常会使用wget命令，当使用其下载目录时，会碰到各种问题，在这里总结记录下wget下载网站目录到服务器指定目录的命令如下：wgethttp://10.90.193.195/fanghuwang/Tools/ZenithGoDriver/R22C00RR1/arm/-r-np-nH--cut-dirs6-P/tmp/zenith-E-Rhtml-o/tmp/wgetZenith.log参数解析：-r：递归下载，下载目录时使用-np：不要下载父目录-nH：不要创建主机目录，下载目录一般不希望创建主机目录的（一般为Host）--cut-dirsnumber：忽略的远程目录数，当希望没有远程目录时，可以设置尽量大-P：下载内容在服务器上的保存目录-E-Rhtml：忽略html形式的文件（否则会携带一些无用的index.html等文件）-o：日志输出文件', 'Linux,Linux命令,Shell', '', '', 1, 1, 5, 1, 4, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-03-24 12:06:48', '2021-03-24', '', '', '1', '410', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3564830787930947584, '平明寻白羽，没在石棱中——李广将军', '李广一生征战沙场却未能封侯拜相，他的后代也命途多舛，司马迁评其“桃李不言下自成蹊”', '<p> &nbsp; &nbsp; &nbsp; &nbsp;西汉抗击匈奴的名将李广，历经文帝、景帝、武帝三朝，他骁勇善战，智勇双全，与匈奴战斗七十余次，常常以少胜多，险中取胜，以致匈奴人闻名丧胆，称之为 “飞将军”。</p><p> &nbsp; &nbsp; &nbsp; &nbsp;李广善骑射，面对匈奴的射雕手，以一敌三而不落下乘。在一次与匈奴的对战中，他率领百骑兵马，远远望见匈奴数千骑兵迎面而来，李广部下惊恐不已，纷纷想要回马奔逃。李广临危不乱，令部下向匈奴的方向进发，在离敌军阵地还有不到二里的地方停下，全部下马解鞍，随意躺卧。当时正值日暮黄昏，匈奴军疑心有诈，迟迟不敢动作，匈奴有一白马将出列挑衅，被李广射杀。直到半夜时分，匈奴军仍然拿不定主意，又害怕汉军在附近设有埋伏半夜偷袭，不得已撤兵而归。李广得以脱身，安全返回营地。在与匈奴的战争中，李广也并非战无不胜，他几次出生入死，死里逃生。又一次以少对多的战斗中，李广兵少战败被擒，匈奴军应大单于生俘李广的要求，将其放在两匹马绳编的网兜中一路回营地。当时李广受伤生病，一路假死，后来寻机夺马取弓，射杀敌军向南飞驰，与溃散的残部汇合带领他们进入关塞，匈奴数百骑兵在后追杀而未能成功。</p><p> &nbsp; &nbsp; &nbsp; &nbsp;就是这样有勇有谋的 “飞将军”，却自嘲 “无尺寸之功以得封邑”，终身未能封侯拜相。汉武帝元授四年（公元前119年），大将军卫青、骠骑将军霍去病大举进攻匈奴，李广几次请战，汉武帝认为他老迈，没有答应，好久才准许他随军前去。出征匈奴中，大将军卫青知道了匈奴单于的住处，计划出兵活捉单于。当时李广任前将军，想要充当先锋，与大单于决一死战，卫青认为李广老迈，怕他不能胜任，而且卫青想要提携曾经救过自己性命的公孙敖，就令李广从东路迂回出击与大军汇合。李广遂只能从东路出击，东路迂回，没有向导，迷失了道路，未能与大军汇合。卫青与匈奴单于交战，未能活捉单于，只能收兵回军。战后卫青向李广询问道路迷失的情况，以向天子报告作战详情，李广没有应对。后来幕府对簿，李广对他的部下说：“我从少年起同匈奴打过大小七十多仗，如今有幸跟随大将军出征同单于军队交战，可是又被调去走迂回绕远的道路，偏又迷失了道路，天意难道就是如此吗？我如今已经六十多岁了，不能再忍受那些刀笔吏的口诛笔伐了！” 最终引颈自杀，含恨而终！</p><p> &nbsp; &nbsp; &nbsp; &nbsp;李广有三子，李当户、李椒、李敢。李当户与李椒早死，李敢一直随父出征。李广死在军中时，李敢跟随在骠骑将军霍去病军中，后来在与匈奴左贤王作战中，斩杀敌军无数，立下战功，被赐封关内爵。李敢怨恨卫青让他父亲含恨而终，出手打伤了卫青，后来在甘泉宫狩猎时，霍去病射杀了李敢，当时武帝宠信霍去病，隐瞒说李敢是被鹿撞死的。天子认为李氏世将，令李当户长子、李广长孙李陵在边塞戍屯防卫匈奴。公元前99年，李陵与贰师将军李广利在祁连山追击匈奴右贤王，李陵率五千骑兵深入匈奴腹地以分散敌人对付贰师将军的兵力，面对匈奴八万大军的包围截击，他苦战八天，斩杀匈奴一万余人，后来因为食缺而且救兵不到，无奈投降匈奴，自言 “无面目报陛下”。汉武帝听闻后震怒，下令诛灭李陵全族。之后李氏名声败落，日渐衰落。</p><p> &nbsp; &nbsp; &nbsp; &nbsp;李广一生征战沙场，出生入死，&ldquo;但使龙城飞将在，不教胡马度阴山&rdquo;是他一生的坚守；然而英雄老迈，“李广难封” 又是他无以述说的意难平；那么未能马革裹尸或许又是他最大的遗憾！</p>', '西汉抗击匈奴的名将李广，历经文帝、景帝、武帝三朝，他骁勇善战，智勇双全，与匈奴战斗七十余次，常常以少胜多，险中取胜，以致匈奴人闻名丧胆，称之为“飞将军”。李广善骑射，面对匈奴的射雕手，以一敌三而不落下乘。在一次与匈奴的对战中，他率领百骑兵马，远远望见匈奴数千骑兵迎面而来，李广部下惊恐不已，纷纷想要回马奔逃。李广临危不乱，令部下向匈奴的方向进发，在离敌军阵地还有不到二里的地方停下，全部下马解鞍，随意躺卧。当时正值日暮黄昏，匈奴军疑心有诈，迟迟不敢动作，匈奴有一白马将出列挑衅，被李广射杀。直到半夜时分，匈奴军仍然拿不定主意，又害怕汉军在附近设有埋伏半夜偷袭，不得已撤兵而归。李广得以脱身，安全返回营地。在与匈奴的战争中，李广也并非战无不胜，他几次出生入死，死里逃生。又一次以少对多的战斗中，李广兵少战败被擒，匈奴军应大单于生俘李广的要求，将其放在两匹马绳编的网兜中一路回营地。当时李广受伤生病，一路假死，后来寻机夺马取弓，射杀敌军向南飞驰，与溃散的残部汇合带领他们进入关塞，匈奴数百骑兵在后追杀而未能成功。就是这样有勇有谋的“飞将军”，却自嘲“无尺寸之功以得封邑”，终身未能封侯拜相。汉武帝元授四年（公元前119年），大将军卫青、骠骑将军霍去病大举进攻匈奴，李广几次请战，汉武帝认为他老迈，没有答应，好久才准许他随军前去。出征匈奴中，大将军卫青知道了匈奴单于的住处，计划出兵活捉单于。当时李广任前将军，想要充当先锋，与大单于决一死战，卫青认为李广老迈，怕他不能胜任，而且卫青想要提携曾经救过自己性命的公孙敖，就令李广从东路迂回出击与大军汇合。李广遂只能从东路出击，东路迂回，没有向导，迷失了道路，未能与大军汇合。卫青与匈奴单于交战，未能活捉单于，只能收兵回军。战后卫青向李广询问道路迷失的情况，以向天子报告作战详情，李广没有应对。后来幕府对簿，李广对他的部下说：“我从少年起同匈奴打过大小七十多仗，如今有幸跟随大将军出征同单于军队交战，可是又被调去走迂回绕远的道路，偏又迷失了道路，天意难道就是如此吗？我如今已经六十多岁了，不能再忍受那些刀笔吏的口诛笔伐了！”最终引颈自杀，含恨而终！李广有三子，李当户、李椒、李敢。李当户与李椒早死，李敢一直随父出征。李广死在军中时，李敢跟随在骠骑将军霍去病军中，后来在与匈奴左贤王作战中，斩杀敌军无数，立下战功，被赐封关内爵。李敢怨恨卫青让他父亲含恨而终，出手打伤了卫青，后来在甘泉宫狩猎时，霍去病射杀了李敢，当时武帝宠信霍去病，隐瞒说李敢是被鹿撞死的。天子认为李氏世将，令李当户长子、李广长孙李陵在边塞戍屯防卫匈奴。公元前99年，李陵与贰师将军李广利在祁连山追击匈奴右贤王，李陵率五千骑兵深入匈奴腹地以分散敌人对付贰师将军的兵力，面对匈奴八万大军的包围截击，他苦战八天，斩杀匈奴一万余人，后来因为食缺而且救兵不到，无奈投降匈奴，自言“无面目报陛下”。汉武帝听闻后震怒，下令诛灭李陵全族。之后李氏名声败落，日渐衰落。李广一生征战沙场，出生入死，&ldquo;但使龙城飞将在，不教胡马度阴山&rdquo;是他一生的坚守；然而英雄老迈，“李广难封”又是他无以述说的意难平；那么未能马革裹尸或许又是他最大的遗憾！', '散文,随笔', '', '', 1, 1, 5, 1, 11, 3564729154333048832, 1, '审核通过', 0, 1, 'zhaoxiaorong', '2021-04-04 00:51:35', '2021-04-04', '', '', '1', '1368', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3564830787930947585, 'mysql 在不同环境的大小写区分规则', 'mysql 在不同环境的大小写区分规则', '<blockquote><span style="font-family: 宋体;">原文： </span><a href="https://www.cnblogs.com/kevingrace/p/6150748.html" target="_blank"><span style="font-family: 宋体;">https://www.cnblogs.com/kevingrace/p/6150748.html</span></a><span style="font-family: 宋体;"> </span></blockquote><h2><span style="font-family: 宋体;">默认规则</span></h2><p><span style="font-family: 宋体;"><strong>1) Linux 环境</strong></span></p><p><span style="font-family: 宋体;">数据库名与表名是严格区分大小写的；</span></p><p><span style="font-family: 宋体;">表的别名是严格区分大小写的；</span></p><p><span style="font-family: 宋体;">列名与列的别名在所有的情况下均是忽略大小写的；</span></p><p><span style="font-family: 宋体;">变量名也是严格区分大小写的；</span></p><p><span style="font-family: 宋体;"><strong>2) Windows 环境</strong></span></p><p><span style="font-family: 宋体;">都不区分大小写；</span></p><p><span style="font-family: 宋体;"><strong>3) Mac OS下（非UFS卷）</strong></span></p><p><span style="font-family: 宋体;">都不区分大小写；</span></p><h2><span style="font-family: 宋体;">默认配置查询命令</span></h2><pre><code class="language-sql">show variables like "%case%";</code></pre><h2><span style="font-family: 宋体;">参数说明（lower_case_table_names）</span></h2><p><span style="font-family: 宋体;">Lunix 下默认值为 0，Windows 下默认值是 ，Mac OS X 下默认值是 2 。</span></p><table style="width: auto;"><tbody><tr><th colSpan="1" rowSpan="1" width="87.28"><span style="font-family: 宋体;">参数值</span></th><th colSpan="1" rowSpan="1" width="auto"><span style="font-family: 宋体;">解释</span></th></tr><tr><td colspan="1" rowspan="1" width="auto" style="text-align: center;"><span style="font-family: 宋体;">0</span></td><td colSpan="1" rowSpan="1" width="auto"><span style="font-family: 宋体;">使用CREATE TABLE或CREATE DATABASE语句指定的大小写字母在硬盘上保存表名和数据库名。名称比较对大小写敏感。在大小写不敏感的操作系统如windows或Mac OS x上我们不能将该参数设为0，如果在大小写不敏感的文件系统上将--lowercase-table-names强制设为0，并且使用不同的大小写访问MyISAM表名，可能会导致索引破坏。</span></td></tr><tr><td colspan="1" rowspan="1" width="auto" style="text-align: center;"><span style="font-family: 宋体;">1</span></td><td colSpan="1" rowSpan="1" width="auto"><span style="font-family: 宋体;">表名在硬盘上以小写保存，名称比较对大小写不敏感。MySQL将所有表名转换为小写在存储和查找表上。该行为也适合数据库名和表的别名。该值为Windows的默认值。</span></td></tr><tr><td colspan="1" rowspan="1" width="auto" style="text-align: center;"><span style="font-family: 宋体;">2</span></td><td colSpan="1" rowSpan="1" width="auto"><span style="font-family: 宋体;">表名和数据库名在硬盘上使用CREATE TABLE或CREATE DATABASE语句指定的大小写字母进行保存，但MySQL将它们转换为小写在查找表上。名称比较对大小写不敏感，即按照大小写来保存，按照小写来比较。注释：只在对大小写不敏感的文件系统上适用! innodb表名用小写保存。</span></td></tr></tbody></table><h2>参数说明（lower_case_file_system）</h2><p>数据目录所在的文件系统对文件名的大小写是否敏感</p><table style="width: 100%;"><tbody><tr><th colSpan="1" rowSpan="1" width="auto">参数值</th><th colSpan="1" rowSpan="1" width="auto">解释</th></tr><tr><td colspan="1" rowspan="1" width="auto" style="text-align: center;">ON</td><td colspan="1" rowspan="1" width="auto" style="text-align: center;">不敏感</td></tr><tr><td colspan="1" rowspan="1" width="auto" style="text-align: center;">OFF</td><td colspan="1" rowspan="1" width="auto" style="text-align: center;">敏感</td></tr></tbody></table><h2>修改mysql为不区分大小写设置</h2><pre><code class="language-sql"># 以安全模式关闭数据库
mysqladmin -uroot -p shutdown
# 修改配置文件 /etc/my.cnf，添加配置
[mysqld]
lower_case_table_names=1
# 启动服务
/etc/init.d/mysql start</code></pre><h2>由大小写敏感转换为不敏感方法</h2><p>1）将数据库数据通过 mysqldump 导出。</p><p>2）在 my.cnf 中更改 lower_case_tables_name = 1，并重启 mysql 数据库。</p><p>3）将导出的数据导入mysql 数据库。</p><h2>在查询时区分字段值的大小写</h2><p>如果想在查询时区分字段值的大小写，则字段值需要设置 <span style="color: rgb(225, 60, 57);"><strong>BINARY</strong></span> 属性</p><p>a）创建时设置：</p><pre><code class="language-sql">CREATE TABLE T(A VARCHAR(10) BINARY);</code></pre><p>b）使用alter修改</p><h2>总结</h2><p><span style="color: rgb(225, 60, 57);">所以在不同操作系统中为了能使程序和数据库都能正常运行，最好的办法是在设计表的时候都转为小写！！</span></p><p><br></p>', '原文：https://www.cnblogs.com/kevingrace/p/6150748.html默认规则1)Linux环境数据库名与表名是严格区分大小写的；表的别名是严格区分大小写的；列名与列的别名在所有的情况下均是忽略大小写的；变量名也是严格区分大小写的；2)Windows环境都不区分大小写；3)MacOS下（非UFS卷）都不区分大小写；默认配置查询命令showvariableslike"%case%";参数说明（lower_case_table_names）Lunix下默认值为0，Windows下默认值是，MacOSX下默认值是2。参数值解释0使用CREATETABLE或CREATEDATABASE语句指定的大小写字母在硬盘上保存表名和数据库名。名称比较对大小写敏感。在大小写不敏感的操作系统如windows或MacOSx上我们不能将该参数设为0，如果在大小写不敏感的文件系统上将--lowercase-table-names强制设为0，并且使用不同的大小写访问MyISAM表名，可能会导致索引破坏。1表名在硬盘上以小写保存，名称比较对大小写不敏感。MySQL将所有表名转换为小写在存储和查找表上。该行为也适合数据库名和表的别名。该值为Windows的默认值。2表名和数据库名在硬盘上使用CREATETABLE或CREATEDATABASE语句指定的大小写字母进行保存，但MySQL将它们转换为小写在查找表上。名称比较对大小写不敏感，即按照大小写来保存，按照小写来比较。注释：只在对大小写不敏感的文件系统上适用!innodb表名用小写保存。参数说明（lower_case_file_system）数据目录所在的文件系统对文件名的大小写是否敏感参数值解释ON不敏感OFF敏感修改mysql为不区分大小写设置#以安全模式关闭数据库mysqladmin-uroot-pshutdown#修改配置文件/etc/my.cnf，添加配置[mysqld]lower_case_table_names=1#启动服务/etc/init.d/mysqlstart由大小写敏感转换为不敏感方法1）将数据库数据通过mysqldump导出。2）在my.cnf中更改lower_case_tables_name=1，并重启mysql数据库。3）将导出的数据导入mysql数据库。在查询时区分字段值的大小写如果想在查询时区分字段值的大小写，则字段值需要设置BINARY属性a）创建时设置：CREATETABLET(AVARCHAR(10)BINARY);b）使用alter修改总结所以在不同操作系统中为了能使程序和数据库都能正常运行，最好的办法是在设计表的时候都转为小写！！', 'MySQL', 'https://www.cnblogs.com/kevingrace/p/6150748.html', '', 1, 2, 5, 1, 5, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-04-04 07:25:45', '2021-04-04', '', '', '1', '1183', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3564830787930947586, 'bootstrapTable 插件通过百分比方式设置单元格列宽', 'bootstrapTable 插件通过百分比方式设置单元格列宽', '<ul><li>默认样式</li></ul><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565015496879243264.png" alt="c3eb97b2da74ab5497f8502e4df051bb.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565015496879243264.png" style=""/></p><ul><li>期望样式</li></ul><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565015577137250304.png" alt="cb1e5475e1b67e1945f6e4c8047aa456.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565015577137250304.png" style=""/></p><ul><li>相关代码</li></ul><p>第一步：我们通过百分比设置列宽，根据业务需要也可以使用固定长度</p><pre><code class="language-javascript">let columns = [
	{field: ''key'', title: ''字典键'', align: "center", width: "15%"},
	{field: ''value'', title: ''字典值'', align: "left", width: "35%"},
	{field: ''desc'', title: ''字典描述'', align: "left", width: "15%"},
	{field: ''createUser'', title: ''创建用户'', align: "center", width: "6%"},
	{field: ''updateUser'', title: ''修改用户'', align: "center", width: "6%"},
	{field: ''updateTime'', title: ''修改时间'', align: "center", width: "8%"},
	{field: ''operation'', title: ''操作'', align: "center", width: "15%", events: operateEvents, formatter: operationFormatter}
];</code></pre><p>第二步：设置表格样式</p><pre><code class="language-javascript">&lt;table class="table-sm" id="variableTable" style="table-layout:fixed;word-break:break-all;"&gt;

&lt;/table&gt;</code></pre><p><br></p>', '默认样式期望样式相关代码第一步：我们通过百分比设置列宽，根据业务需要也可以使用固定长度letcolumns=[{field:''key'',title:''字典键'',align:"center",width:"15%"},{field:''value'',title:''字典值'',align:"left",width:"35%"},{field:''desc'',title:''字典描述'',align:"left",width:"15%"},{field:''createUser'',title:''创建用户'',align:"center",width:"6%"},{field:''updateUser'',title:''修改用户'',align:"center",width:"6%"},{field:''updateTime'',title:''修改时间'',align:"center",width:"8%"},{field:''operation'',title:''操作'',align:"center",width:"15%",events:operateEvents,formatter:operationFormatter}];第二步：设置表格样式&lt;tableclass="table-sm"id="variableTable"style="table-layout:fixed;word-break:break-all;"&gt;&lt;/table&gt;', 'Bootstrap,BootstrapTable', '', '', 1, 1, 5, 1, 3, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-05-10 01:22:18', '2021-05-10', 'suntao', '2023-02-16 13:53:03', '1', '676', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3564830787930947587, '给网站白嫖一个 SSL 证书', '免费 SSL 证书申请', '<h2>SSL 证书申请</h2><h3>· 选择域名型免费版</h3><p>网站链接：<span style="color: rgb(66, 144, 247);"> </span><a href="http://aq.chinaz.com/SSL/Index" target="_blank"><span style="color: rgb(66, 144, 247);">http://aq.chinaz.com/SSL/Index</span></a><span style="color: rgb(66, 144, 247);"> </span></p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565021833994436608.png" alt="ce5abf2d4b9ec4b0d9e4871fb68652e6.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565021833994436608.png" style=""/></p><p>点击核对信息并提交，进入下一步，注意个人信息填写准确。</p><h3>· 填写域名及密码等申请信息</h3><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565022403572531200.png" alt="f3b03533fc2a037ce1186add2b6b9dcf.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565022403572531200.png" style=""/></p><p><span style="color: rgb(225, 60, 57);">注意：密钥密码一定要备份记住，在证书部署时需要使用。</span></p><h3>· 证书申请验证</h3><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565023245390315520.png" alt="ce3c00542a461a7ec128ffec783003f0.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565023245390315520.png" style=""/></p><p><span style="color: rgb(225, 60, 57);">这里采用的是手动DNS验证，记录值一定要跟自己申请的一致！</span></p><p><span style="color: rgb(225, 60, 57);">百度站长官方验证指导： </span><a href="http://aq.chinaz.com/SSLHelp/Purchase#g5" target="_blank"><span style="color: rgb(66, 144, 247);">http://aq.chinaz.com/SSLHelp/Purchase#g5</span></a><span style="color: rgb(66, 144, 247);"> </span></p><p>全部操作完成后，等待大概 30 分钟左右，即可申请成功（状态为已颁发）。</p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565025425719558144.png" alt="9b3aa1d4bea1488e6db67d0e4abf7199.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565025425719558144.png" style=""/></p><h2>下载证书</h2><p>点击下载证书，我是 Tomcat 部署，所以选择了JKS，这里根据自己的部署场景选择合适的证书。</p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565025573233229824.png" alt="72fb05f85e250f73d9b7e73927620b53.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565025573233229824.png" style=""/></p><h2>证书部署（Tomcat）</h2><p>百度站长官方指导：<span style="color: rgb(66, 144, 247);"> </span><a href="http://aq.chinaz.com/SSLHelp/Guide#cf" target="_blank"><span style="color: rgb(66, 144, 247);">http://aq.chinaz.com/SSLHelp/Guide#cf</span></a><span style="color: rgb(66, 144, 247);"> </span></p><h3>· 上传证书</h3><p>将下载的证书（<span style="color: rgb(225, 60, 57);"><strong>www.suntaoblog.com.jks</strong></span>）放到 tomcat 的 conf 目录下。</p><h3>· 修改 server.xml</h3><pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Server port="8005" shutdown="SHUTDOWN"&gt;
  ......
  &lt;Service name="Catalina"&gt;
    &lt;!-- HTTP 指向 HTTPS --&gt;
    &lt;Connector port="80" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="443" /&gt;
	&lt;!-- HTTPS 配置 --&gt;
    &lt;Connector port="443" protocol="HTTP/1.1"
               SSLEnabled="true"
               maxThreads="150"
               scheme="https"
               secure="true"
               keystoreFile="conf/www.suntaoblog.com.jks"
               keystorePass="meC6ugw7"
               clientAuth="false"
               sslProtocol="TLS" /&gt;

	&lt;!-- 域名配置 --&gt;
    &lt;Engine name="Catalina" defaultHost="www.suntaoblog.com"&gt;
      ......
      &lt;Host name="www.suntaoblog.com"  appBase="" unpackWARs="true" autoDeploy="true"&gt;
		&lt;Context path="" docBase ="webapps/blog-3.1.20220104.war" /&gt;
        &lt;Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="localhost_access_log" suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" /&gt;
      &lt;/Host&gt;
    &lt;/Engine&gt;
  &lt;/Service&gt;
&lt;/Server&gt;
</code></pre><p><span style="color: rgb(225, 60, 57);">注意：80 端口对应的 redirectPort 要修改为 443</span></p><p>keystoreFile：JKS 文件的路径</p><p>keystorePass：在填写域名及密码等申请信息时填写的密钥密码</p><h3>· 修改 web.xml</h3><p>在最下面增加如下内容，注意：<span style="color: rgb(225, 60, 57);">跟welcome-file-list标签是同级的！</span></p><pre><code class="language-xml">&lt;welcome-file-list&gt;
  &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;
  &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;
  &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;
&lt;/welcome-file-list&gt;

&lt;!-- 增加下方内容 --&gt;
&lt;login-config&gt;
  &lt;auth-method&gt;CLIENT-CERT&lt;/auth-method&gt;
  &lt;realm-name&gt;Client Cert Users-only Area&lt;/realm-name&gt;
&lt;/login-config&gt;
&lt;security-constraint&gt;
  &lt;web-resource-collection&gt;
    &lt;web-resource-name&gt;SSL&lt;/web-resource-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
  &lt;/web-resource-collection&gt;
  &lt;user-data-constraint&gt;
    &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;
  &lt;/user-data-constraint&gt;
&lt;/security-constraint&gt;
</code></pre><p>到这里就可以通过 HTTPS 访问网站了~~</p><hr/><p><span style="color: rgb(225, 60, 57);">注意：</span></p><p>证书不是永久的，需要每年申请！</p><p>如果无法通过 HTTPS 访问，请检查云服务器的安全组配置或防火墙配置，要开通 443 端口，阿里云如下：</p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565033512480276480.jpg" alt="1676530201770.jpg" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565033512480276480.jpg" style=""/></p><p><br></p>', 'SSL证书申请·选择域名型免费版网站链接：http://aq.chinaz.com/SSL/Index点击核对信息并提交，进入下一步，注意个人信息填写准确。·填写域名及密码等申请信息注意：密钥密码一定要备份记住，在证书部署时需要使用。·证书申请验证这里采用的是手动DNS验证，记录值一定要跟自己申请的一致！百度站长官方验证指导：http://aq.chinaz.com/SSLHelp/Purchase#g5全部操作完成后，等待大概30分钟左右，即可申请成功（状态为已颁发）。下载证书点击下载证书，我是Tomcat部署，所以选择了JKS，这里根据自己的部署场景选择合适的证书。证书部署（Tomcat）百度站长官方指导：http://aq.chinaz.com/SSLHelp/Guide#cf·上传证书将下载的证书（www.suntaoblog.com.jks）放到tomcat的conf目录下。·修改server.xml&lt;?xmlversion="1.0"encoding="UTF-8"?&gt;&lt;Serverport="8005"shutdown="SHUTDOWN"&gt;......&lt;Servicename="Catalina"&gt;&lt;!--HTTP指向HTTPS--&gt;&lt;Connectorport="80"protocol="HTTP/1.1"connectionTimeout="20000"redirectPort="443"/&gt;&lt;!--HTTPS配置--&gt;&lt;Connectorport="443"protocol="HTTP/1.1"SSLEnabled="true"maxThreads="150"scheme="https"secure="true"keystoreFile="conf/www.suntaoblog.com.jks"keystorePass="meC6ugw7"clientAuth="false"sslProtocol="TLS"/&gt;&lt;!--域名配置--&gt;&lt;Enginename="Catalina"defaultHost="www.suntaoblog.com"&gt;......&lt;Hostname="www.suntaoblog.com"appBase=""unpackWARs="true"autoDeploy="true"&gt;&lt;Contextpath=""docBase="webapps/blog-3.1.20220104.war"/&gt;&lt;ValveclassName="org.apache.catalina.valves.AccessLogValve"directory="logs"prefix="localhost_access_log"suffix=".txt"pattern="%h%l%u%t&quot;%r&quot;%s%b"/&gt;&lt;/Host&gt;&lt;/Engine&gt;&lt;/Service&gt;&lt;/Server&gt;注意：80端口对应的redirectPort要修改为443keystoreFile：JKS文件的路径keystorePass：在填写域名及密码等申请信息时填写的密钥密码·修改web.xml在最下面增加如下内容，注意：跟welcome-file-list标签是同级的！&lt;welcome-file-list&gt;&lt;welcome-file&gt;index.html&lt;/welcome-file&gt;&lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;&lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;&lt;/welcome-file-list&gt;&lt;!--增加下方内容--&gt;&lt;login-config&gt;&lt;auth-method&gt;CLIENT-CERT&lt;/auth-method&gt;&lt;realm-name&gt;ClientCertUsers-onlyArea&lt;/realm-name&gt;&lt;/login-config&gt;&lt;security-constraint&gt;&lt;web-resource-collection&gt;&lt;web-resource-name&gt;SSL&lt;/web-resource-name&gt;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/web-resource-collection&gt;&lt;user-data-constraint&gt;&lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;&lt;/user-data-constraint&gt;&lt;/security-constraint&gt;到这里就可以通过HTTPS访问网站了~~注意：证书不是永久的，需要每年申请！如果无法通过HTTPS访问，请检查云服务器的安全组配置或防火墙配置，要开通443端口，阿里云如下：', 'HTTPS,SSL部署', '', '', 1, 1, 5, 1, 4, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-05-11 02:58:46', '2021-05-11', '', '', '1', '2311', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3564830787930947588, '网站 2.0 上线公告', '网站 2.0 上线公告', '<p><span style="font-family: 宋体;">2.0 版本将于 </span><span style="color: rgb(225, 60, 57); font-family: 宋体;"><strong>2021-05-25</strong></span><span style="font-family: 宋体;"> 上线，相对于当前版本（1.1.3.update3）来说</span></p><ul><li><span style="font-family: 宋体;">前端模板变更，采用杨青青个人博客的模板</span></li><li><span style="font-family: 宋体;">新增日志监控功能</span></li><li><span style="font-family: 宋体;">新增全局异常处理，统一返回的功能</span></li><li><span style="font-family: 宋体;">集成 slf4j 插件</span></li><li><span style="font-family: 宋体;">后端代码架构及页面排版优化</span></li><li><span style="font-family: 宋体;">修改 1.* 的若干问题</span></li></ul><p><span style="font-family: 宋体;">相关页面展示：</span></p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565040739672915968.png" alt="1676531852969.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565040739672915968.png" style=""/></p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565041000055308288.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565041000055308288.png" style=""/></p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565041411172597760.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565041411172597760.png" style=""/></p>', '2.0版本将于2021-05-25上线，相对于当前版本（1.1.3.update3）来说前端模板变更，采用杨青青个人博客的模板新增日志监控功能新增全局异常处理，统一返回的功能集成slf4j插件后端代码架构及页面排版优化修改1.*的若干问题相关页面展示：', '随笔,网站公告', '', '', 1, 1, 5, 1, 11, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-05-24 02:00:19', '2021-05-24', '', '', '1', '133', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3564834737765744640, '卫青不败由天幸', '卫青如何从奴仆之子逆袭为赫赫战功的大将军', '<p style="text-indent: 2em;"><span style="font-family: 微软雅黑;">卫青，字仲卿，河东郡平阳（今山西临汾）人，西汉著名将领、军事家，官至大司马大将军，封长平侯。《史记》卷一一一、《汉书》卷五五有传。卫青骁勇善战，在抗击匈奴中立下汗马功劳，他曾以“七战七捷”的辉煌战绩，败匈奴于漠北，成为解除西汉北方严重边患的伟大军事家 。司马迁将其功绩概括为：“直曲塞，广河南，破祁连，通西国，靡北胡。”卫青出身微贱，因亲得官，以及涉及“飞将军”李广之死等原因 ，也有一些贬低、不满卫青的言词，常散溢于若干史论中。</span></p><p style="text-indent: 2em;"><span style="font-family: 微软雅黑;">卫青的父亲叫郑季，是一个小吏，曾经在平阳侯曹寿府中做事（曹寿是汉初丞相曹参的后代。他的夫人是汉武帝的姐姐阳信公主，因为嫁给了平阳侯曹寿，所以也称平阳公主）。这期间，郑季与府中的奴婢卫媪私通，生下了卫青（随母姓）。卫媪还有三个女儿，大女儿卫君孺（汉书中名卫君儒，史记中名卫孺），二女儿卫少儿，三女儿是我们熟悉的卫子夫。卫青稍大后，被送到生父郑季的家里，郑季让他放羊，郑季的嫡妻和她的亲生子女们把他当做奴仆看待。后来卫青回到母亲身边，受到平阳公主的喜爱，做了公主的侍从。</span></p><p style="text-indent: 2em;"><span style="font-family: 微软雅黑;">公元前139年，卫子夫入宫，得到汉武帝的宠爱，卫青也得到举荐来到宫中当差。卫子夫入宫后不久便怀了孕，皇后陈阿娇万分嫉妒，陈阿娇的母亲大长公主刘嫖唯恐女儿失宠，将卫青捕入狱中，准备处死他。值此危急时刻，卫青的挚友骑郎公孙敖率领平时和卫青要好的数名壮士，冲破看守，闯进囚室，将卫青劫走。汉武帝得知此事，既没有责怪公孙敖等人，也没有继续处置卫青，相反，他任命卫青为建章宫监，还让他做了侍中。</span></p><p style="text-indent: 2em;"><span style="font-family: 微软雅黑;">汉武帝时期，西汉王朝经过修养生息，国力强盛，再加上汉武帝是一位有着雄才大略的君主，他一改西汉前期对匈奴防御为主的军事战略，决议兴兵讨伐匈奴。汉武帝采用王恢的主张，在马邑诱击匈奴军，然而马邑伏击战以失败而告终，却让西汉与匈奴的关系正式破裂，由此拉开了汉朝军事反击匈奴的序幕，双方进入到较长时期的交战状态。</span></p><p style="text-indent: 2em; text-align: center;"><span style="font-family: 微软雅黑;">公元前129年，经过充分的准备，汉武帝派李广、卫青、公孙敖、公孙贺四人同日拜将，各率领一万骑兵，兵分四路出击匈奴（见下图）。卫尉李广为骁骑将军，领军出雁门，遭遇匈奴主力部队，汉军几乎全军覆没，他本人也被俘，后来侥幸逃归；太中大夫公孙敖为车骑将军，出代郡，被匈奴打败，损失了七千多人马；太仆公孙贺为轻车将军，出云中，因没有战功而退军；卫青为车骑将军，从上谷出发，一路追击匈奴兵至龙城，斩杀七百余人，得胜而还。龙城之战，卫青虽是小胜，但意义重大，他第一次出兵远征就攻占并烧毁了匈奴祭祀天地、鬼神和先祖的圣地。卫青烧掉龙城，等于捣毁了敌人的精神支柱，从而极大地鼓舞了汉军的士气。卫青旗开得胜，汉武帝极为高兴，当即封他为关内侯，以示嘉奖。从此，卫青开始了他辉煌的戎马生涯。</span><img src="https://file.suntaoblog.com/upload/2023-02/16/3564836315029569536.png" alt="f93de72b95094478739f9ab673b84de6.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3564836315029569536.png" style="width: 100%;"><span style="font-family: 微软雅黑;">图一</span></p><p style="text-indent: 2em;"><span style="font-family: 微软雅黑;">公元前128年，匈奴两万骑入侵上谷、渔阳、雁门郡，&lt;/span&gt;&lt;/span&gt;北部边郡形势紧张。在这危难之际，卫青再次受命出征，迎战匈奴（见下图）。与此同时，汉武帝还下令李息从代郡出兵，切断匈奴的后路，同卫青相互策应。卫青认真分析军情，认为匈奴奔袭千里，士卒疲惫，他采用速战速决之策，率领三万精骑，挥师北上，把匈奴的军队打得七零八落，狼狈逃窜。雁门一战，进一步显示了卫青的军事才能，他在朝中的地位也日益上升，甚至超过了一些有战功的老将，他逐渐成为抗击匈奴的主将。</span><img src="https://file.suntaoblog.com/upload/2023-02/16/3564837394467258368.png" alt="736b16bb4b3cb8f810f96d7e5d47c3cc.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3564837394467258368.png" style="width: 100%;"></p><p style="text-align: center;"><span style="font-family: 微软雅黑;">图二</span></p><p style="text-indent: 2em; text-align: left;"><span style="font-family: 微软雅黑;">公元前127年，汉武帝为了收复战略要地河南地一带（河套以南之地），发起了著名的河南战役。卫青采取“迂回侧击”的突击战术（见下图最左侧箭头），绕到匈奴后方，迅速拿下河南地通往北地的隘口，一举切断了驻守河南地的匈奴白羊王、娄烦王与单于王庭的联系，使他们陷入孤立无援的困境。紧接着，卫青率领骑兵，对白羊王、楼烦王形成包围的态势。白羊王、楼烦王为避免全军覆灭，仓皇逃走。卫青率一支劲旅，一举肃清了河南地的匈奴势力，取得了大胜。匈奴被杀两千多人，被俘数千人，损失牛羊一百多万头，卫青凯旋。为了表彰其战功，汉武帝晋封卫青为长平侯，食邑三千八百户。随同出征的校尉也获得不同的赏赐。为了巩固成果，西汉在河南地设置朔方郡，并移民十万人，建立了稳固的西北边防体系。</span></p><p style="text-indent: 2em; text-align: center;"><span style="font-family: 微软雅黑;">河南地之战后，匈奴人并不甘心失败。从公元前126年起，匈奴军大规模入侵代郡、定襄、上郡，杀害汉朝百姓几千人。公元前124年，卫青被任命为车骑将军，率领骑兵三万人，从高阙出发。同时出发的还有游击将军苏建、强弩将军李沮、骑将军公孙贺、轻车将军李蔡，他们都由卫青统一指挥，从朔方出发。卫青率大军出塞六七百里，趁夜突袭包围了匈奴右贤王部，大获全胜（见下图标有右贤王箭头）。这次战役后，汉武帝正式授予卫青大将军印信，各路将领及部队统一归大将军指挥。由此，卫青逐渐成为西汉军队的最高领导者。</span><img src="https://file.suntaoblog.com/upload/2023-02/16/3564837979140653056.png" alt="42cf4bef2ba0e061bc865bb6e73a337f.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3564837979140653056.png" style="width: 100%;"><span style="font-family: 微软雅黑;">图三</span></p><p style="text-indent: 2em; text-align: center;"><span style="font-family: 微软雅黑;">河南战役是汉匈战争的一个转折点，此战之后西汉由当初的诱歼、迎战、出击，转变为积极主动地深入攻击。在此后的战役中，卫青的外甥霍去病脱颖而出，他英勇果决，曾率领八百名“敢死队员”袭击匈奴，斩获甚重，被汉武帝封为冠军侯。接下来的河西战役中（公元前121年），霍去病被任命为骠骑将军，率领一万骑兵从陇西出发，攻打河西的匈奴军。霍去病大军深入匈奴腹地，打败了匈奴浑邪王与休屠王，斩获众多。他还成功受降浑邪王部，平定了匈奴降军内部的叛乱。河西之战胜利后，西汉王朝在河西设置了酒泉、张掖、敦煌、武威四郡，控制了通往西域的咽喉。（见下图左侧粉紫色箭头）（关于河西四郡，如果感兴趣推荐观看纪录片《河西走廊》前三集，一目了然。）</span><img src="https://file.suntaoblog.com/upload/2023-02/16/3564838480989126656.png" alt="a83b65ec9a66c087b80619fb7deb4c06.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3564838480989126656.png" style="width: 100%;"><span style="font-family: 微软雅黑;">图四</span></p><p style="text-indent: 2em; text-align: left;"><span style="font-family: 微软雅黑;">河西战役虽然获胜，但匈奴主力仍然不断侵扰右北平、定襄等地。公元前119年，汉武帝命霍去病与卫青各率五万骑，分兵出定襄和代郡，迂回深入漠北一二千里，为的是歼灭匈奴主力。卫青部首先与匈奴军遭遇，匈奴单于发觉形势不妙，乘夜率兵突围，卫青派兵连夜追击二百余里，俘斩匈奴兵将一万九千余人；而霍去病则率军直接北进到漠北两千多里，与匈奴左贤王部接战（见上图）。此役，汉军大获全胜，汉武帝闻讯大喜，授卫青与霍去病大司马，所从将士一律论功行赏。此战后，“匈奴远遁，漠南无王庭”。</span></p><p style="text-indent: 2em; text-align: left;"><span style="font-family: 微软雅黑;">公元106年，卫青去世，汉武帝下令其在茂陵（汉武帝陵墓）陪葬。史书评卫青“以外戚贵幸，然颇用材能自进”，这是颇为中肯的。正所谓“时势造英雄”，卫青出身卑贱，能从奴仆之子逆袭为大司马大将军，求娶平阳公主，固然与其国舅的身份有关，但最重要的还是他自身的才干、品行和功业，他战功赫赫，痛击匈奴，宣扬了大汉国威，是当之无愧的民族英雄。</span></p>', '卫青，字仲卿，河东郡平阳（今山西临汾）人，西汉著名将领、军事家，官至大司马大将军，封长平侯。《史记》卷一一一、《汉书》卷五五有传。卫青骁勇善战，在抗击匈奴中立下汗马功劳，他曾以“七战七捷”的辉煌战绩，败匈奴于漠北，成为解除西汉北方严重边患的伟大军事家。司马迁将其功绩概括为：“直曲塞，广河南，破祁连，通西国，靡北胡。”卫青出身微贱，因亲得官，以及涉及“飞将军”李广之死等原因，也有一些贬低、不满卫青的言词，常散溢于若干史论中。卫青的父亲叫郑季，是一个小吏，曾经在平阳侯曹寿府中做事（曹寿是汉初丞相曹参的后代。他的夫人是汉武帝的姐姐阳信公主，因为嫁给了平阳侯曹寿，所以也称平阳公主）。这期间，郑季与府中的奴婢卫媪私通，生下了卫青（随母姓）。卫媪还有三个女儿，大女儿卫君孺（汉书中名卫君儒，史记中名卫孺），二女儿卫少儿，三女儿是我们熟悉的卫子夫。卫青稍大后，被送到生父郑季的家里，郑季让他放羊，郑季的嫡妻和她的亲生子女们把他当做奴仆看待。后来卫青回到母亲身边，受到平阳公主的喜爱，做了公主的侍从。公元前139年，卫子夫入宫，得到汉武帝的宠爱，卫青也得到举荐来到宫中当差。卫子夫入宫后不久便怀了孕，皇后陈阿娇万分嫉妒，陈阿娇的母亲大长公主刘嫖唯恐女儿失宠，将卫青捕入狱中，准备处死他。值此危急时刻，卫青的挚友骑郎公孙敖率领平时和卫青要好的数名壮士，冲破看守，闯进囚室，将卫青劫走。汉武帝得知此事，既没有责怪公孙敖等人，也没有继续处置卫青，相反，他任命卫青为建章宫监，还让他做了侍中。汉武帝时期，西汉王朝经过修养生息，国力强盛，再加上汉武帝是一位有着雄才大略的君主，他一改西汉前期对匈奴防御为主的军事战略，决议兴兵讨伐匈奴。汉武帝采用王恢的主张，在马邑诱击匈奴军，然而马邑伏击战以失败而告终，却让西汉与匈奴的关系正式破裂，由此拉开了汉朝军事反击匈奴的序幕，双方进入到较长时期的交战状态。公元前129年，经过充分的准备，汉武帝派李广、卫青、公孙敖、公孙贺四人同日拜将，各率领一万骑兵，兵分四路出击匈奴（见下图）。卫尉李广为骁骑将军，领军出雁门，遭遇匈奴主力部队，汉军几乎全军覆没，他本人也被俘，后来侥幸逃归；太中大夫公孙敖为车骑将军，出代郡，被匈奴打败，损失了七千多人马；太仆公孙贺为轻车将军，出云中，因没有战功而退军；卫青为车骑将军，从上谷出发，一路追击匈奴兵至龙城，斩杀七百余人，得胜而还。龙城之战，卫青虽是小胜，但意义重大，他第一次出兵远征就攻占并烧毁了匈奴祭祀天地、鬼神和先祖的圣地。卫青烧掉龙城，等于捣毁了敌人的精神支柱，从而极大地鼓舞了汉军的士气。卫青旗开得胜，汉武帝极为高兴，当即封他为关内侯，以示嘉奖。从此，卫青开始了他辉煌的戎马生涯。图一公元前128年，匈奴两万骑入侵上谷、渔阳、雁门郡，&lt;/span&gt;&lt;/span&gt;北部边郡形势紧张。在这危难之际，卫青再次受命出征，迎战匈奴（见下图）。与此同时，汉武帝还下令李息从代郡出兵，切断匈奴的后路，同卫青相互策应。卫青认真分析军情，认为匈奴奔袭千里，士卒疲惫，他采用速战速决之策，率领三万精骑，挥师北上，把匈奴的军队打得七零八落，狼狈逃窜。雁门一战，进一步显示了卫青的军事才能，他在朝中的地位也日益上升，甚至超过了一些有战功的老将，他逐渐成为抗击匈奴的主将。图二公元前127年，汉武帝为了收复战略要地河南地一带（河套以南之地），发起了著名的河南战役。卫青采取“迂回侧击”的突击战术（见下图最左侧箭头），绕到匈奴后方，迅速拿下河南地通往北地的隘口，一举切断了驻守河南地的匈奴白羊王、娄烦王与单于王庭的联系，使他们陷入孤立无援的困境。紧接着，卫青率领骑兵，对白羊王、楼烦王形成包围的态势。白羊王、楼烦王为避免全军覆灭，仓皇逃走。卫青率一支劲旅，一举肃清了河南地的匈奴势力，取得了大胜。匈奴被杀两千多人，被俘数千人，损失牛羊一百多万头，卫青凯旋。为了表彰其战功，汉武帝晋封卫青为长平侯，食邑三千八百户。随同出征的校尉也获得不同的赏赐。为了巩固成果，西汉在河南地设置朔方郡，并移民十万人，建立了稳固的西北边防体系。河南地之战后，匈奴人并不甘心失败。从公元前126年起，匈奴军大规模入侵代郡、定襄、上郡，杀害汉朝百姓几千人。公元前124年，卫青被任命为车骑将军，率领骑兵三万人，从高阙出发。同时出发的还有游击将军苏建、强弩将军李沮、骑将军公孙贺、轻车将军李蔡，他们都由卫青统一指挥，从朔方出发。卫青率大军出塞六七百里，趁夜突袭包围了匈奴右贤王部，大获全胜（见下图标有右贤王箭头）。这次战役后，汉武帝正式授予卫青大将军印信，各路将领及部队统一归大将军指挥。由此，卫青逐渐成为西汉军队的最高领导者。图三河南战役是汉匈战争的一个转折点，此战之后西汉由当初的诱歼、迎战、出击，转变为积极主动地深入攻击。在此后的战役中，卫青的外甥霍去病脱颖而出，他英勇果决，曾率领八百名“敢死队员”袭击匈奴，斩获甚重，被汉武帝封为冠军侯。接下来的河西战役中（公元前121年），霍去病被任命为骠骑将军，率领一万骑兵从陇西出发，攻打河西的匈奴军。霍去病大军深入匈奴腹地，打败了匈奴浑邪王与休屠王，斩获众多。他还成功受降浑邪王部，平定了匈奴降军内部的叛乱。河西之战胜利后，西汉王朝在河西设置了酒泉、张掖、敦煌、武威四郡，控制了通往西域的咽喉。（见下图左侧粉紫色箭头）（关于河西四郡，如果感兴趣推荐观看纪录片《河西走廊》前三集，一目了然。）图四河西战役虽然获胜，但匈奴主力仍然不断侵扰右北平、定襄等地。公元前119年，汉武帝命霍去病与卫青各率五万骑，分兵出定襄和代郡，迂回深入漠北一二千里，为的是歼灭匈奴主力。卫青部首先与匈奴军遭遇，匈奴单于发觉形势不妙，乘夜率兵突围，卫青派兵连夜追击二百余里，俘斩匈奴兵将一万九千余人；而霍去病则率军直接北进到漠北两千多里，与匈奴左贤王部接战（见上图）。此役，汉军大获全胜，汉武帝闻讯大喜，授卫青与霍去病大司马，所从将士一律论功行赏。此战后，“匈奴远遁，漠南无王庭”。公元106年，卫青去世，汉武帝下令其在茂陵（汉武帝陵墓）陪葬。史书评卫青“以外戚贵幸，然颇用材能自进”，这是颇为中肯的。正所谓“时势造英雄”，卫青出身卑贱，能从奴仆之子逆袭为大司马大将军，求娶平阳公主，固然与其国舅的身份有关，但最重要的还是他自身的才干、品行和功业，他战功赫赫，痛击匈奴，宣扬了大汉国威，是当之无愧的民族英雄。', '随笔,散文', '', '', 1, 1, 5, 1, 11, 3564729154333048832, 1, '审核通过', 0, 1, 'zhaoxiaorong', '2021-05-27 02:16:37', '2021-05-27', 'zhaoxiaorong', '2023-02-16 02:03:00', '1', '2620', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3564834737765744641, '通过 expect 脚本在服务器之间自动互信', '在使用 ssh、scp 时往往要输入密码，在一些自动化流程中，往往是希望不加人为职守（半夜）进行操作的，这时就需要在虚拟机之间建立互信，实现免密登录', '<blockquote>背景：我们团队每日需要通过 anisible 调用几百台服务器节点进行应用的自动化集成部署和测试，这时需要保证 anisible 服务器与被调用的服务器之间可以免密登录，但是一台一台的建立互信过于人工且耗时（服务器节点会定期被机房回收，回收后下次下发又要重新建立互信），于是决定通过 expect 脚本实现互信的快速建立。</blockquote><h2>基本思路</h2><p>第一步：检查脚本入参是否正确，获取 SSH 用户和密码</p><p>第二步：如果公钥私钥文件不存在，则通过 <span style="color: rgb(225, 60, 57);">ssh-keygen -t rsa</span> 创建</p><p>第三步：进行SSH链接，<span style="color: rgb(225, 60, 57);">ssh root@8.141.59.133 echo success</span></p><p>第四步：拼接公钥到远程主机的~/.ssh/authorized_keys文件中</p><p style="text-indent: 2em;">一般在服务器手动建立互信是使用 <span style="color: rgb(225, 60, 57);">ssh-keygen -t rsa</span> 命令，会在家目录（root | home/`whoami`）的 .ssh 目录下生成 <span style="color: rgb(225, 60, 57);">id_rsa</span> 和 <span style="color: rgb(225, 60, 57);">id_rsa.pub</span> 文件，把生成的 id_rsa.pub 文件中的公钥内容添加到远程目标服务器用户的 <span style="color: rgb(225, 60, 57);">~/.ssh/authorized_keys</span> 文件中，然后就可以 SSH 免密登录了，文件如下图：</p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565059916248907776.png" alt="7fe89109d4775f297d9592b8e88a4f02.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565059916248907776.png" style=""/></p><h2>脚本内容</h2><p style="text-indent: 2em;">实际生产环境中，虚拟机规模可能比较大，或者在测试环境中IP经常存在变动，人为添加互信比较耗时耗力，我们可以通过expect脚本实现一键建立互信的操作，脚本如下：</p><h3>createTrustSsh.exp</h3><pre><code class="language-bash">#!/usr/bin/expect -f

set prefix "\\033\\[1;31m&gt;&gt;&gt;\\033\\[0m"

proc usage {} {
	regsub ".*/" $::argv0 "" name
	send_user "please usage: $name user@host password\\n"
	exit 1
}

proc check_id_pub_file {} {
  	if {![file exists $::id_file]} {
		send_user "$::prefix id_rsa.pub is not found, try creating...\\n"

		if {[catch {spawn ssh-keygen -t rsa} error]} {
			send_error "$::prefix $error\\n"
			exit 1
		}

		expect -nocase -re "\\(.*\\):"
		send -- "\\r"
		expect -nocase -re "passphrase.*:"
		send -- "\\r"
		expect -nocase -re "passphrase.*again:"
		send -- "\\r"
		expect eof
		send_user "$::prefix id_rsa.pub create success\\n"
	}
}

proc remove_known_host_entry {host} {
	regsub ".*/" $::argv0 "" name
	set tmp_file "/tmp/$name.tmp"
	set known_hosts "$::env(HOME)/.ssh/known_hosts"
	send_user "$::prefix trying to remove ''$host'' from ~/.ssh/known_hosts...\\n"

	if {[catch {
		set fd_known_hosts [open $known_hosts r]
		set fd_tmp [open $tmp_file w]

		while 1 {
			gets $fd_known_hosts line
			if [eof $fd_known_hosts] {
				break
			}

			if [regexp "(\\[^, ]+,)*${host}(,\\[^, ]+)* " $line] {
				continue
			}

			puts $fd_tmp $line
		}

		close $fd_known_hosts
		close $fd_tmp

		file rename -force $tmp_file $known_hosts
		send_user "remove ''$host'' from ~/.ssh/known_hosts success\\n"
	} error]} {
		send_user "$::prefix $error\\n"
		exit 1
	}
}

# get user@host and password
if {[llength $argv] != 2} {
	usage
}

set user@host [lindex $argv 0]
set password [lindex $argv 1]

# create public key file if not found
set id_file "$env(HOME)/.ssh/id_rsa.pub"
check_id_pub_file

# ssh user@host
send_user "$prefix start ssh\\n"
set yes_no 0
set ok_string success
set tomeout 120
set done 0

while {!$done} {
	spawn ssh ${user@host} echo $ok_string
	expect {
		-nocase -re "yes/no" {
			send_user "$prefix ${user@host} start add known_hosts\\n"
			set yes_no 1
			send -- "yes\\r"
			set done 1
		}
		-nocase -re "password: " {
			send_user "$prefix ${user@host} known_hosts is added\\n"
			set done 1
		}
		$ok_string {
			send_user "$prefix ${user@host} is aready autossh\\n"
			exit 0
		}
		"@@@@@@@@@@@@@@@@@@@@" {
			expect eof
			set indexofatsign [string first "@" ${user@host}]
			incr indexofatsign
			set hostname [string range ${user@host} $indexofatsign end]
			remove_known_host_entry $hostname
		}
		eof {
			send_error "$prefix failed\\n"
			exit 1
		}
		timeout {
			send_error "$prefix timeour\\n"
			exit 1
		}
	}
}

if {$yes_no} {
	expect {
		$ok_string {
			send_user "$prefix ok\\n"
			exit 0
		}
		-nocase -re "password: " {
			send -- "$password\\r"
			expect {
				-nocase "try again" {
					send_error "$prefix password error\\n"
					exit 1
				}
				-nocase "passwrord: " {
					send_error "$prefix password error\\n"
					exit 1
				}
				$ok_string {
				}
			}
		}
	}
}

# ssh finish
send_user "$prefix ssh finish\\n"
expect eof

# append public key to remote hosts ~/.ssh/authorized_keys
send_user "$prefix append public key to ${user@host} ~/.ssh/authorized_keys\\n"
if {[catch {
	set idfile [open $id_file RDONLY]
	set pub_key [read $idfile]
	close $idfile
} error]} {
	send_error "$prefix $error\\n"
	exit 1
}

set pub_key [string trimright $pub_key "\\r\\n"]
spawn ssh ${user@host} "cd; mkdir -p .ssh 2&gt; /dev/null; echo ''$pub_key'' &gt;&gt; .ssh/authorized_keys"
expect -nocase -re "password:"
send -- "$password\\r"
expect eof

send_user "$prefix authenticating relation success\\n"

exit 0
</code></pre><h3>autossh.sh</h3><pre><code class="language-bash">#!/bin/bash

createSsh() {
  ip=$1
  user=$2
  password=$3

  echo "Create $user''s ssh from local to $ip..."
  su $user -c "expect $autosshFile $user@$ip $password" &gt;&gt; $logFile
  if [ $? != 0 ]; then
    echo "Create $user''s ssh from local to $ip...failed"
    return 1
  fi

  echo "Create $user''s ssh from local to $ip...done"
}

main() {
  if [ ! -f $hostCfgFile ]; then
    echo "autossh.cfg not exist"
    exit 1
  fi

  cat $hostCfgFile | grep -v ''^[ ]*#'' | while read hostInfo
  do
    ip=`echo $hostInfo | awk ''{print $1}''`
    user=`echo $hostInfo | awk ''{print $2}''`
    password=`echo $hostInfo | awk ''{print $3}''`

    if [ -z $ip -o -z $user -o -z $password ]; then
      continue
    fi

    createSsh $ip $user $password
  done
}

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"

hostCfgFile=$SCRIPT_DIR/autossh.cfg
autosshFile=$SCRIPT_DIR/createTrustSsh.exp
logFile=$SCRIPT_DIR/ssh.log

main
</code></pre><h3>autossh.cfg</h3><pre><code ># ip       user   password
8.141.60.131 root password001
8.141.60.132 root password002
8.141.60.133 arm  password003
8.141.60.134 root password004
</code></pre><h2>使用方式</h2><ul><li>将三个文件下载到主服务器（autossh.cfg 文件中的第一个服务器）的 /tmp/autossh 目录（其它目录也可以）下</li><li>将需要互信的用户名、IP、密码配置到 autossh.cfg 文件中</li><li>执行命令：<span style="color: rgb(225, 60, 57);"><strong>bash autossh.sh</strong></span>，执行结果如下</li></ul><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565063394270642176.png" alt="7a8712674a089d04aa43977c56b1f954.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565063394270642176.png" style=""/></p><p>至此互信成功！</p><h2>附件下载</h2><p><a data-w-e-type="attachment" data-w-e-is-void data-w-e-is-inline href="https://file.suntaoblog.com/upload/2023-02/16/3565064254174265344.zip" download="autossh.zip">autossh.zip</a></p><h2>注意事项</h2><p>expect 文件内容格式要求比较严，推荐使用附件中已经验证好的文件进行操作或学习！</p>', '背景：我们团队每日需要通过anisible调用几百台服务器节点进行应用的自动化集成部署和测试，这时需要保证anisible服务器与被调用的服务器之间可以免密登录，但是一台一台的建立互信过于人工且耗时（服务器节点会定期被机房回收，回收后下次下发又要重新建立互信），于是决定通过expect脚本实现互信的快速建立。基本思路第一步：检查脚本入参是否正确，获取SSH用户和密码第二步：如果公钥私钥文件不存在，则通过ssh-keygen-trsa创建第三步：进行SSH链接，sshroot@8.141.59.133echosuccess第四步：拼接公钥到远程主机的~/.ssh/authorized_keys文件中一般在服务器手动建立互信是使用ssh-keygen-trsa命令，会在家目录（root|home/`whoami`）的.ssh目录下生成id_rsa和id_rsa.pub文件，把生成的id_rsa.pub文件中的公钥内容添加到远程目标服务器用户的~/.ssh/authorized_keys文件中，然后就可以SSH免密登录了，文件如下图：脚本内容实际生产环境中，虚拟机规模可能比较大，或者在测试环境中IP经常存在变动，人为添加互信比较耗时耗力，我们可以通过expect脚本实现一键建立互信的操作，脚本如下：createTrustSsh.exp#!/usr/bin/expect-fsetprefix"\\033\\[1;31m&gt;&gt;&gt;\\033\\[0m"procusage{}{regsub".*/"$::argv0""namesend_user"pleaseusage:$nameuser@hostpassword\\n"exit1}proccheck_id_pub_file{}{if{![fileexists$::id_file]}{send_user"$::prefixid_rsa.pubisnotfound,trycreating...\\n"if{[catch{spawnssh-keygen-trsa}error]}{send_error"$::prefix$error\\n"exit1}expect-nocase-re"\\(.*\\):"send--"\\r"expect-nocase-re"passphrase.*:"send--"\\r"expect-nocase-re"passphrase.*again:"send--"\\r"expecteofsend_user"$::prefixid_rsa.pubcreatesuccess\\n"}}procremove_known_host_entry{host}{regsub".*/"$::argv0""namesettmp_file"/tmp/$name.tmp"setknown_hosts"$::env(HOME)/.ssh/known_hosts"send_user"$::prefixtryingtoremove''$host''from~/.ssh/known_hosts...\\n"if{[catch{setfd_known_hosts[open$known_hostsr]setfd_tmp[open$tmp_filew]while1{gets$fd_known_hostslineif[eof$fd_known_hosts]{break}if[regexp"(\\[^,]+,)*${host}(,\\[^,]+)*"$line]{continue}puts$fd_tmp$line}close$fd_known_hostsclose$fd_tmpfilerename-force$tmp_file$known_hostssend_user"remove''$host''from~/.ssh/known_hostssuccess\\n"}error]}{send_user"$::prefix$error\\n"exit1}}#getuser@hostandpasswordif{[llength$argv]!=2}{usage}setuser@host[lindex$argv0]setpassword[lindex$argv1]#createpublickeyfileifnotfoundsetid_file"$env(HOME)/.ssh/id_rsa.pub"check_id_pub_file#sshuser@hostsend_user"$prefixstartssh\\n"setyes_no0setok_stringsuccesssettomeout120setdone0while{!$done}{spawnssh${user@host}echo$ok_stringexpect{-nocase-re"yes/no"{send_user"$prefix${user@host}startaddknown_hosts\\n"setyes_no1send--"yes\\r"setdone1}-nocase-re"password:"{send_user"$prefix${user@host}known_hostsisadded\\n"setdone1}$ok_string{send_user"$prefix${user@host}isareadyautossh\\n"exit0}"@@@@@@@@@@@@@@@@@@@@"{expecteofsetindexofatsign[stringfirst"@"${user@host}]incrindexofatsignsethostname[stringrange${user@host}$indexofatsignend]remove_known_host_entry$hostname}eof{send_error"$prefixfailed\\n"exit1}timeout{send_error"$prefixtimeour\\n"exit1}}}if{$yes_no}{expect{$ok_string{send_user"$prefixok\\n"exit0}-nocase-re"password:"{send--"$password\\r"expect{-nocase"tryagain"{send_error"$prefixpassworderror\\n"exit1}-nocase"passwrord:"{send_error"$prefixpassworderror\\n"exit1}$ok_string{}}}}}#sshfinishsend_user"$prefixsshfinish\\n"expecteof#appendpublickeytoremotehosts~/.ssh/authorized_keyssend_user"$prefixappendpublickeyto${user@host}~/.ssh/authorized_keys\\n"if{[catch{setidfile[open$id_fileRDONLY]setpub_key[read$idfile]close$idfile}error]}{send_error"$prefix$error\\n"exit1}setpub_key[stringtrimright$pub_key"\\r\\n"]spawnssh${user@host}"cd;mkdir-p.ssh2&gt;/dev/null;echo''$pub_key''&gt;&gt;.ssh/authorized_keys"expect-nocase-re"password:"send--"$password\\r"expecteofsend_user"$prefixauthenticatingrelationsuccess\\n"exit0autossh.sh#!/bin/bashcreateSsh(){ip=$1user=$2password=$3echo"Create$user''ssshfromlocalto$ip..."su$user-c"expect$autosshFile$user@$ip$password"&gt;&gt;$logFileif[$?!=0];thenecho"Create$user''ssshfromlocalto$ip...failed"return1fiecho"Create$user''ssshfromlocalto$ip...done"}main(){if[!-f$hostCfgFile];thenecho"autossh.cfgnotexist"exit1ficat$hostCfgFile|grep-v''^[]*#''|whilereadhostInfodoip=`echo$hostInfo|awk''{print$1}''`user=`echo$hostInfo|awk''{print$2}''`password=`echo$hostInfo|awk''{print$3}''`if[-z$ip-o-z$user-o-z$password];thencontinueficreateSsh$ip$user$passworddone}SCRIPT_DIR="$(cd"$(dirname"$0")"&&pwd)"hostCfgFile=$SCRIPT_DIR/autossh.cfgautosshFile=$SCRIPT_DIR/createTrustSsh.explogFile=$SCRIPT_DIR/ssh.logmainautossh.cfg#ipuserpassword8.141.60.131rootpassword0018.141.60.132rootpassword0028.141.60.133armpassword0038.141.60.134rootpassword004使用方式将三个文件下载到主服务器（autossh.cfg文件中的第一个服务器）的/tmp/autossh目录（其它目录也可以）下将需要互信的用户名、IP、密码配置到autossh.cfg文件中执行命令：bashautossh.sh，执行结果如下至此互信成功！附件下载autossh.zip注意事项expect文件内容格式要求比较严，推荐使用附件中已经验证好的文件进行操作或学习！', 'Shell,Expect脚本,服务器互信', '', '', 1, 1, 5, 1, 4, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-06-10 00:59:23', '2021-06-10', 'suntao', '2023-02-16 16:58:03', '1', '5045', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3564834737765744642, '解决 XShell 无法直接拖动上传的问题', '解决 XShell 无法直接拖动上传的问题', '<h2>问题描述</h2><p>使用Xhell拖到上传报错：rz not found</p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565068773884952576.png" alt="c00145871e63543555da18542254832f.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565068773884952576.png" style=""/></p><h2>解决方法</h2><p>在服务器上，执行 yum install -y lrzsz 命令。</p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565068300859736064.png" alt="c00145871e63543555da18542254832f.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565068300859736064.png" style=""/></p><p><br></p>', '问题描述使用Xhell拖到上传报错：rznotfound解决方法在服务器上，执行yuminstall-ylrzsz命令。', 'XShell', '', '', 1, 1, 5, 1, 4, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-06-21 14:29:34', '2021-06-21', '', '', '1', '67', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3564840924133457920, '仙岛湖游玩日记（两日一夜）', '仙岛湖游玩记录', '<p style="text-indent: 2em; text-align: left;">2021年的六月，在武汉度过的第一个夏日，着实体会到了何为酷暑难当。听闻湖北有许多未被过度开发的纯天然美景，我和孙先生决定寻一处山水圣地避避暑，临时起意选择了离武汉较近的黄石仙岛湖。先附上两张随手拍的仙岛湖的绝美照片<img src="https://file.suntaoblog.com/upload/2023-02/16/3564842300934717440.png" alt="7c01b7c9a6f65932b378737e34d39a4b.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3564842300934717440.png" style="width: 100%;"><img src="https://file.suntaoblog.com/upload/2023-02/16/3564842357054504960.png" alt="84766bccb6227495f8bfe90911f94316.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3564842357054504960.png" style="width: 100%;"></p><p style="text-indent: 2em; text-align: left;">当真是绿水逶迤，芳草长堤，不禁让人想起刘禹锡游洞庭时的那句“遥望洞庭山水翠，白银盘里一青螺”，此处放在仙岛湖上也十分应景。</p><p style="text-indent: 2em; text-align: left;">仙岛湖景区共分为三大部分：天空之城；仙岛湖西线；仙岛湖东线。天空之城主要是爬山，仙岛湖西线和东线是乘船去岛上游玩，不同的线路有不同的景点。</p><p style="text-indent: 2em; text-align: left;">我们第一天到达仙岛湖景区的时间是下午3点，这个时间正好可以很悠闲地坐缆车上山，沿途有很多很有意思的景点：丛林穿越—悬崖秋千—云梯—鸟巢—千佛手—镜子迷宫—七彩滑道，当然还有最重要的天空之境（据闻天空之境的海拔为1314.521），可以在上面观赏整个仙岛湖。<img src="https://file.suntaoblog.com/upload/2023-02/16/3564844508510158848.jpg" alt="微信图片_20230216021759.jpg" data-href="https://file.suntaoblog.com/upload/2023-02/16/3564844508510158848.jpg" style=""><img src="https://file.suntaoblog.com/upload/2023-02/16/3564843155096338432.png" alt="7563b8fc8edbf079e0587a8d2a02b7e2.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3564843155096338432.png" style=""></p><p style="text-indent: 2em; text-align: left;">第二天由于我们没能早起，再加上要赶回武汉的班车，游玩时间大大缩减，很遗憾没有能把西线和东线玩完（西线和东线游玩一趟4小时左右），我们只游玩了西线的体验线，乘船去了叫仙福山的小岛上，岛上的游客只有我和孙先生两人。。。岛的海拔不高，我们只花了不到15分钟就到达了山顶。沿途有一些有趣的小项目：鬼屋、骑马、玻璃滑道等等。<img src="https://file.suntaoblog.com/upload/2023-02/16/3564843234993635328.png" alt="7e091a743702968b3b4b9b034657dced.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3564843234993635328.png" style="width: 100%;"></p><p style="text-indent: 2em; text-align: left;">总体而言，仙岛湖是一个非常值得游玩的地方！最重要的是炎炎夏日出行，务必做好防晒！</p>', '2021年的六月，在武汉度过的第一个夏日，着实体会到了何为酷暑难当。听闻湖北有许多未被过度开发的纯天然美景，我和孙先生决定寻一处山水圣地避避暑，临时起意选择了离武汉较近的黄石仙岛湖。先附上两张随手拍的仙岛湖的绝美照片当真是绿水逶迤，芳草长堤，不禁让人想起刘禹锡游洞庭时的那句“遥望洞庭山水翠，白银盘里一青螺”，此处放在仙岛湖上也十分应景。仙岛湖景区共分为三大部分：天空之城；仙岛湖西线；仙岛湖东线。天空之城主要是爬山，仙岛湖西线和东线是乘船去岛上游玩，不同的线路有不同的景点。我们第一天到达仙岛湖景区的时间是下午3点，这个时间正好可以很悠闲地坐缆车上山，沿途有很多很有意思的景点：丛林穿越—悬崖秋千—云梯—鸟巢—千佛手—镜子迷宫—七彩滑道，当然还有最重要的天空之境（据闻天空之境的海拔为1314.521），可以在上面观赏整个仙岛湖。第二天由于我们没能早起，再加上要赶回武汉的班车，游玩时间大大缩减，很遗憾没有能把西线和东线玩完（西线和东线游玩一趟4小时左右），我们只游玩了西线的体验线，乘船去了叫仙福山的小岛上，岛上的游客只有我和孙先生两人。。。岛的海拔不高，我们只花了不到15分钟就到达了山顶。沿途有一些有趣的小项目：鬼屋、骑马、玻璃滑道等等。总体而言，仙岛湖是一个非常值得游玩的地方！最重要的是炎炎夏日出行，务必做好防晒！', '生活,旅游', '', '', 1, 1, 5, 1, 12, 3564729154333048832, 1, '审核通过', 0, 1, 'zhaoxiaorong', '2021-07-01 15:46:36', '2021-07-01', '', '', '1', '563', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565070887185022976, '网站 3.0 上线公告', '网站 3.0 上线公告', '<p style="line-height: 1.5;"><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;">3.0 版本将于 </span><span style="color: rgb(225, 60, 57); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;"><strong>2021-08-07</strong></span><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;"> 上线，相对于当前版本（2.0.0）来说</span></p><ul><li style="text-align: start; line-height: 1.5;"><span style="font-family: 宋体;">后端代码架构及页面排版优化</span></li><li style="line-height: 1.5;"><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;">后端管理系统页面采用新的框架，使用贤云的 layuiadmin1.7_std 进行优化</span></li><li style="line-height: 1.5;"><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;">文章编辑器由 CKEditor4 升级为 CKEditor5</span></li><li style="line-height: 1.5;"><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;">部署服务器与数据库服务器分离，使用阿里云数据库</span></li><li style="line-height: 1.5;"><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;">集成Redis，增加部分数据的缓存机制，提高页面响应</span></li><li style="line-height: 1.5;"><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;">移除在线用户统计功能</span></li><li style="line-height: 1.5;"><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;">SSL 修改，采用阿里云 SSL</span></li></ul><p style="line-height: 1.5;"><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;">相关页面展示：</span></p><h2 style="line-height: 1.5;"><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;">登录</span></h2><p style="line-height: 1.5;"><img src="https://file.suntaoblog.com/upload/2023-02/16/3565073351762247680.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565073351762247680.png" style=""></p><h2 style="line-height: 1.5;">账号管理</h2><p style="line-height: 1.5;"><img src="https://file.suntaoblog.com/upload/2023-02/16/3565073789018439680.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565073789018439680.png" style=""></p><p style="line-height: 1.5;"><img src="https://file.suntaoblog.com/upload/2023-02/16/3565073892298981376.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565073892298981376.png" style=""></p><p style="line-height: 1.5;"><img src="https://file.suntaoblog.com/upload/2023-02/16/3565074151087538176.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565074151087538176.png" style=""></p><h2 style="line-height: 1.5;">系统管理</h2><p style="line-height: 1.5;"><img src="https://file.suntaoblog.com/upload/2023-02/16/3565074247678164992.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565074247678164992.png" style=""></p><p style="line-height: 1.5;"><img src="https://file.suntaoblog.com/upload/2023-02/16/3565074506462527488.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565074506462527488.png" style=""></p><p style="line-height: 1.5;"><img src="https://file.suntaoblog.com/upload/2023-02/16/3565074739602915328.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565074739602915328.png" style=""></p><h2 style="line-height: 1.5;">运维管理</h2><p style="line-height: 1.5;"><img src="https://file.suntaoblog.com/upload/2023-02/16/3565078741350612992.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565078741350612992.png" style=""></p><p style="line-height: 1.5;"><img src="https://file.suntaoblog.com/upload/2023-02/16/3565078897496162304.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565078897496162304.png" style=""></p><p style="line-height: 1.5;"><img src="https://file.suntaoblog.com/upload/2023-02/16/3565079034171752448.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565079034171752448.png" style=""></p><p style="line-height: 1.5;"><img src="https://file.suntaoblog.com/upload/2023-02/16/3565079134612750336.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565079134612750336.png" style=""></p><h2 style="line-height: 1.5;">网站管理</h2><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565080053836414976.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565080053836414976.png" style=""/></p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565080138573938688.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565080138573938688.png" style=""/></p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565080240193536000.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565080240193536000.png" style=""/></p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565080325564399616.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565080325564399616.png" style=""/></p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565080450755985408.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565080450755985408.png" style=""/></p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565080541592027136.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565080541592027136.png" style=""/></p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565080971172642816.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565080971172642816.png" style=""/></p><h2>审核管理</h2><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565081207727194112.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565081207727194112.png" style=""/></p><h2>个人中心</h2><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565081404897230848.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565081404897230848.png" style=""/></p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565081493145387008.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565081493145387008.png" style=""/></p><h2>发布文章</h2><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565081638251528192.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565081638251528192.png" style=""/></p>', '3.0版本将于2021-08-07上线，相对于当前版本（2.0.0）来说后端代码架构及页面排版优化后端管理系统页面采用新的框架，使用贤云的layuiadmin1.7_std进行优化文章编辑器由CKEditor4升级为CKEditor5部署服务器与数据库服务器分离，使用阿里云数据库集成Redis，增加部分数据的缓存机制，提高页面响应移除在线用户统计功能SSL修改，采用阿里云SSL相关页面展示：登录账号管理系统管理运维管理网站管理审核管理个人中心发布文章', '随笔,网站公告', '', '', 1, 1, 5, 1, 11, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-06 21:39:15', '2021-08-06', '', '', '1', '237', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565093233077780480, '如何理解面向对象编程', '面向对象是什么？', '<h2>面向对象和面向过程的区别</h2><p style="text-indent: 2em;"><span style="font-family: 宋体;">对比面向过程，是两种不同的处理问题的角度。</span><span style="font-family: 宋体;"><u>面向过程更注重处理事情的步骤以及顺序，即第一步干嘛，第二步干嘛</u></span><span style="font-family: 宋体;">。而</span><span style="font-family: 宋体;"><u>面向对象则更注重处理这个事情涉及到那些参与者，并根据这些参与者拥有的属性和可以做出的行为来封装为对象</u></span><span style="font-family: 宋体;">（Object）。对于面向对象的一些复杂的行为的具体实现，其实就是面向过程。面向过程更加容易理解，高效，面向对象则更易于复用、扩展及维护。</span></p><h2>面向对象的特征</h2><h3>封装</h3><p style="text-indent: 2em;"><span style="font-family: 宋体;"><strong>隐藏内部实现，只暴露接口允许外部调用</strong></span><span style="font-family: 宋体;">。例如：Java Bean 私有化属性，提供公共的 get / set 方法；数据库驱动链接只需要调用接口，无需关注具体如何建立的链接。</span></p><h3>继承</h3><p style="text-indent: 2em;"><span style="font-family: 宋体;"><strong>子类继承父类，并重写父类的方法</strong></span><span style="font-family: 宋体;">。在 Java 中，所有的类都默认继承于 Object 类，子类继承父类的属性方法，每个子类按需定制，可以提升代码的复用性和扩展性。</span></p><h3>多态</h3><p style="text-indent: 2em;"><span style="font-family: 宋体;"><strong>一个对象具有多种形态，基于对象所属类的不同，对同一方法的调用呈现不同的表现</strong></span><span style="font-family: 宋体;">。多态的条件：</span><span style="color: rgb(225, 60, 57); font-family: 宋体;">继承</span><span style="font-family: 宋体;">、</span><span style="color: rgb(225, 60, 57); font-family: 宋体;">方法重写</span><span style="font-family: 宋体;">、</span><span style="color: rgb(225, 60, 57); font-family: 宋体;">父类引用指向子类对象</span><span style="font-family: 宋体;">。多态无法调用子类特有的方法，因为在编译器，对象其实是父类，在运行期，对象才是子类。</span></p>', '面向对象和面向过程的区别对比面向过程，是两种不同的处理问题的角度。面向过程更注重处理事情的步骤以及顺序，即第一步干嘛，第二步干嘛。而面向对象则更注重处理这个事情涉及到那些参与者，并根据这些参与者拥有的属性和可以做出的行为来封装为对象（Object）。对于面向对象的一些复杂的行为的具体实现，其实就是面向过程。面向过程更加容易理解，高效，面向对象则更易于复用、扩展及维护。面向对象的特征封装隐藏内部实现，只暴露接口允许外部调用。例如：JavaBean私有化属性，提供公共的get/set方法；数据库驱动链接只需要调用接口，无需关注具体如何建立的链接。继承子类继承父类，并重写父类的方法。在Java中，所有的类都默认继承于Object类，子类继承父类的属性方法，每个子类按需定制，可以提升代码的复用性和扩展性。多态一个对象具有多种形态，基于对象所属类的不同，对同一方法的调用呈现不同的表现。多态的条件：继承、方法重写、父类引用指向子类对象。多态无法调用子类特有的方法，因为在编译器，对象其实是父类，在运行期，对象才是子类。', 'Java,面试题', '', '', 1, 1, 5, 1, 2, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-08 19:53:05', '2021-08-08', '', '', '1', '469', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565103637518614528, 'JDK、JRE、JVM的区别', 'JDK、JRE、JVM的区别', '<p>JDK：全称 Java Development Kit，Java 开发工具</p><p>JRE：全称 Java Runtime Enviroment，Java 运行时环境</p><p>JVM：全称 Java Virtual Machine，Java 虚拟机，解析字节码文件为机器码</p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565105007395078144.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565105007395078144.png" style=""/></p>', 'JDK：全称JavaDevelopmentKit，Java开发工具JRE：全称JavaRuntimeEnviroment，Java运行时环境JVM：全称JavaVirtualMachine，Java虚拟机，解析字节码文件为机器码', 'Java,面试题', '', '', 1, 1, 5, 1, 2, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-08 20:06:27', '2021-08-08', '', '', '1', '126', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565106295742660608, '== 和 equals 的区别？', '== 和 equals 的区别？', '<ol><li style="line-height: 2;"><span style="font-family: 宋体;">== 既可以比较基本类型也可以用来比较引用类型，对于基本类型就是比较值，对于引用类型就是比较内存地址。</span></li><li style="line-height: 2;"><span style="font-family: 宋体;">equals 在 Object 中的方法，默认实现也是采用 == 进行比较的，通常会被重写。</span></li></ol><p style="line-height: 2;"><span style="font-family: 宋体;">补充：在 String 中，使用 == 或 equals 比较的结果展示</span></p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565108807556136960.png" alt="828cd4841ecd263fb2ce480e8da598df.png" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565108807556136960.png" style=""/></p>', '==既可以比较基本类型也可以用来比较引用类型，对于基本类型就是比较值，对于引用类型就是比较内存地址。equals在Object中的方法，默认实现也是采用==进行比较的，通常会被重写。补充：在String中，使用==或equals比较的结果展示', 'Java,面试题', '', '', 1, 1, 5, 1, 2, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-09 05:11:28', '2021-08-09', '', '', '1', '133', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565109443005775872, 'Final 关键字用法及作用', 'Java关键字 - Final', '<blockquote>final 关键字字面意思是"最终的"，可以用来修饰类，方法和变量</blockquote><h2>修饰类</h2><p style="text-indent: 2em;">标识类是最终类，不可被继承。</p><h2>修饰方法</h2><p style="text-indent: 2em;">标识方法不可以被子类重写。</p><h2>修饰变量</h2><h3>成员变量</h3><p style="text-indent: 2em;">如果修饰的是<u>类变量</u>，只能在静态初始化块中指定初始值或者在声明时显示的指定值；如果修饰的是<u>普通成员变量</u>，可以在非静态初始化块，构造器中指定初始值或者在声明时显示的指定值。</p><h3>局部变量</h3><p style="text-indent: 2em;">系统不会自动为局部变量进行初始化，局部变量必须由程序进行显示的初始化。因此使用 final 修饰局部变量时，即可以在定义时指定值（后续不可以再对变量赋值），或者不知道默认值，在后续的代码中进行赋值（仅一次）。</p><h3>基本数据类型和引用类型</h3><p style="text-indent: 2em;">如果修饰的是基本数据类型，则其数值一旦初始化之后便不可以在被修改；如果修饰的是引用数据类型，则在其初始化后便不能在让其指向另一个对象，但是引用的对象的内容是可以修改的。</p><h2>为什么局部内部类和匿名内部类只能访问局部 final 变量（JDK8 之前）？</h2><p style="text-indent: 2em;">首先，内部类和外部类是处于同一级别的，内部类不会因为定义在方法中就会随着方法执行完成而被销毁。这里会存在一个问题：当外部类的方法执行结束后，局部变量就会被销毁，但是内部类的对象可以还存在。这里就出现了一个矛盾：内部类对象访问了一个不存在的变量。为了解决这个问题，就<span style="color: rgb(225, 60, 57);">将局部变量复制了一份作为内部类的成员变量</span>，这样当局部变量死亡后，内部类仍可以访问它，实际访问的是局部变量的 "copy"，这样就好像是延迟了局部变量的声明周期，使其跟内部类的生命周期一致。将局部变量复制为内部类成员变量时，必须保证两个变量是一致的，也就是如果我们在内部类中修改了成员变量，方法中的局部变量也要跟着改变，解决这一问题的方式就是<span style="color: rgb(225, 60, 57);">将局部变量设置为 final 修饰</span>，对它进行初始化后，就不允许再去修改这个变量，从而保证了外部局部变量和内部成员变量的一致性。</p><blockquote>在 Java SE 8 之前，必须把从局部类访问的局部变量声明为 final。《Java 核心技术 卷一 252页》</blockquote><p><br></p>', 'final关键字字面意思是"最终的"，可以用来修饰类，方法和变量修饰类标识类是最终类，不可被继承。修饰方法标识方法不可以被子类重写。修饰变量成员变量如果修饰的是类变量，只能在静态初始化块中指定初始值或者在声明时显示的指定值；如果修饰的是普通成员变量，可以在非静态初始化块，构造器中指定初始值或者在声明时显示的指定值。局部变量系统不会自动为局部变量进行初始化，局部变量必须由程序进行显示的初始化。因此使用final修饰局部变量时，即可以在定义时指定值（后续不可以再对变量赋值），或者不知道默认值，在后续的代码中进行赋值（仅一次）。基本数据类型和引用类型如果修饰的是基本数据类型，则其数值一旦初始化之后便不可以在被修改；如果修饰的是引用数据类型，则在其初始化后便不能在让其指向另一个对象，但是引用的对象的内容是可以修改的。为什么局部内部类和匿名内部类只能访问局部final变量（JDK8之前）？首先，内部类和外部类是处于同一级别的，内部类不会因为定义在方法中就会随着方法执行完成而被销毁。这里会存在一个问题：当外部类的方法执行结束后，局部变量就会被销毁，但是内部类的对象可以还存在。这里就出现了一个矛盾：内部类对象访问了一个不存在的变量。为了解决这个问题，就将局部变量复制了一份作为内部类的成员变量，这样当局部变量死亡后，内部类仍可以访问它，实际访问的是局部变量的"copy"，这样就好像是延迟了局部变量的声明周期，使其跟内部类的生命周期一致。将局部变量复制为内部类成员变量时，必须保证两个变量是一致的，也就是如果我们在内部类中修改了成员变量，方法中的局部变量也要跟着改变，解决这一问题的方式就是将局部变量设置为final修饰，对它进行初始化后，就不允许再去修改这个变量，从而保证了外部局部变量和内部成员变量的一致性。在JavaSE8之前，必须把从局部类访问的局部变量声明为final。《Java核心技术卷一252页》', 'Java,Java关键字,面试题', '', '', 1, 1, 5, 1, 2, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-09 06:17:30', '2021-08-09', '', '', '1', '824', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565114366674075648, 'String、StringBuilder、StringBuffer区别及使用场景', 'String、StringBuilder、StringBuffer区别及使用场景', '<p style="text-indent: 2em;">String 是 &nbsp;<a href="https://www.suntaoblog.com/articles/3565109443005775872" target="_blank"><span style="color: rgb(66, 144, 247);">final</span></a> 关键字修饰的，不可变，每次赋值都会产生新的对象；StringBuilder 和 StringBuffer 都是在原对象上操作，都继承于 AbstractStringBuilder，StringBuffer 是线程安全的，StringBuilder 线程不安全，StringBuffer 的方法都是 synchronized 关键字修饰的，所以性能没有 StringBuilder 高，对于经常需要动态拼接的字符串内容的场景使用 StringBuilder 和 StringBuffer，优先使用 StringBuilder，对于多线程共享变量使用 StringBuffer。</p>', 'String是final关键字修饰的，不可变，每次赋值都会产生新的对象；StringBuilder和StringBuffer都是在原对象上操作，都继承于AbstractStringBuilder，StringBuffer是线程安全的，StringBuilder线程不安全，StringBuffer的方法都是synchronized关键字修饰的，所以性能没有StringBuilder高，对于经常需要动态拼接的字符串内容的场景使用StringBuilder和StringBuffer，优先使用StringBuilder，对于多线程共享变量使用StringBuffer。', 'Java,String,面试题', '', '', 1, 1, 5, 1, 2, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-09 12:53:03', '2021-08-09', '', '', '1', '303', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565118053739921408, '重载和重写的区别', '重载和重写的区别', '<blockquote><strong>方法签名</strong>：可以理解为查找 Java 方法的唯一标识，在同一个类中不可能出现多个方法签名相同的方法，在进行<span style="color: rgb(225, 60, 57);">重载解析</span>的过程中，会根据方法签名查找唯一的方法，匹配不到会发生编译时报错。<br><br>方法签名由<span style="color: rgb(225, 60, 57);">方法名</span>、<span style="color: rgb(225, 60, 57);">参数列表（类型、个数、顺序）</span>组成。</blockquote><h2>重载</h2><p style="text-indent: 2em;">在同一个类中，存在<span style="color: rgb(225, 60, 57);">多个方法名相同，参数列表（类型、个数、顺序）不同【方法签名不同】</span>的方法，叫做方法重载，方法重载与返回值和修饰符无关。</p><h2>重写</h2><p style="text-indent: 2em;">重写发生在继承关系中，<span style="color: rgb(225, 60, 57);">方法名相同，参数列表相同【方法签名一致】</span>。</p><p style="text-indent: 2em;"><span style="color: rgb(225, 60, 57);">无法重写的条件</span>：无法重写父类中的 private 方法和 final 方法（abstract 关键字不能与 private 或 final 关键字同时存在）；</p><p style="text-indent: 2em;">重写的规则如下（两小一大）：</p><p><img src="https://file.suntaoblog.com/upload/2023-02/16/3565121182841700352.jpg" alt="v2-8ecdbd775731153ac0fb1d89c579a991_r.jpg" data-href="https://file.suntaoblog.com/upload/2023-02/16/3565121182841700352.jpg" style=""/></p><p style="text-indent: 2em;">备注：</p><p style="text-indent: 2em;">void 代表无返回值，父类返回 void 则子类不允许有返回值；</p><p style="text-indent: 2em;">访问修饰符：public &gt; protected &gt; 缺省 &gt; private</p>', '方法签名：可以理解为查找Java方法的唯一标识，在同一个类中不可能出现多个方法签名相同的方法，在进行重载解析的过程中，会根据方法签名查找唯一的方法，匹配不到会发生编译时报错。方法签名由方法名、参数列表（类型、个数、顺序）组成。重载在同一个类中，存在多个方法名相同，参数列表（类型、个数、顺序）不同【方法签名不同】的方法，叫做方法重载，方法重载与返回值和修饰符无关。重写重写发生在继承关系中，方法名相同，参数列表相同【方法签名一致】。无法重写的条件：无法重写父类中的private方法和final方法（abstract关键字不能与private或final关键字同时存在）；重写的规则如下（两小一大）：备注：void代表无返回值，父类返回void则子类不允许有返回值；访问修饰符：public&gt;protected&gt;缺省&gt;private', 'Java,面试题', '', '', 1, 1, 5, 1, 2, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-09 13:34:00', '2021-08-09', '', '', '1', '386', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565122601854435328, '接口和抽象类的区别', '接口和抽象类的区别', '<h2 style="line-height: 1.5;"><span style="font-family: 宋体;">不同点</span></h2><ul><li style="line-height: 1.5;"><span style="font-family: 宋体;">抽象类由 abstract 关键字修饰；接口由 interface 关键字修饰</span></li><li style="line-height: 1.5;"><span style="font-family: 宋体;">抽象类中可以存在普通成员函数；而接口中只能存在 public abstract 方法（</span><span style="color: rgb(225, 60, 57); font-family: 宋体;">JDK8 支持了静态方法、默认实现</span><span style="font-family: 宋体;">）</span></li><li style="line-height: 1.5;"><span style="font-family: 宋体;">抽象类的成员变量可以是任意类型的；而接口中的成员变量只能是public static final 类型的</span></li><li style="line-height: 1.5;"><span style="font-family: 宋体;">抽象类只能继承一个；但是接口可以实现多个</span></li><li style="line-height: 1.5;"><span style="font-family: 宋体;">抽象类的设计目的：代码复用，当不同的类具有某些相同的行为（记为集合A），且其中一部分行为的实现方式一致时（A的非真子集，记为B），可以将这些类都派生于一个抽象类。这个抽象类中实现了集合B，避免使所有的子类都实现B，从而达到代码复用的目的。而A-B的部分就是每个子类的差异化特性，有具体的子类自己实现；接口的设计目的：对类的</span><span style="color: rgb(225, 60, 57); font-family: 宋体;">行为</span><span style="font-family: 宋体;">进行</span><span style="color: rgb(225, 60, 57); font-family: 宋体;">有</span><span style="font-family: 宋体;">约束</span></li><li style="line-height: 1.5;"><span style="font-family: 宋体;">抽象类的定义是自下而上的（自下而上抽象）；接口的定义是自上而下的（自上而下约束）</span></li><li style="line-height: 1.5;"><span style="font-family: 宋体;">抽象类是对类本质的抽象，表达是 </span><span style="color: rgb(225, 60, 57); font-family: 宋体;">is a</span><span style="font-family: 宋体;"> 的关系，抽象类包含并实现了子类的通用特性，将子类存在差异化的特性进行抽象，并由子类去实现；接口的话是对行为的抽象，表达是 </span><span style="color: rgb(225, 60, 57); font-family: 宋体;">like a</span><span style="font-family: 宋体;"> 的关系，接口主要是定义行为，定义类可以做什么，至于实现类的主体是什么，如何实现，接口不关注</span></li></ul><h2 style="line-height: 1.5;"><span style="font-family: 宋体;">相同点</span></h2><ul><li style="line-height: 1.5;"><span style="font-family: 宋体;">不能实例化</span></li><li style="line-height: 1.5;"><span style="font-family: 宋体;">派生类必须实现未实现的方法</span></li></ul><h2 style="line-height: 1.5;"><span style="font-family: 宋体;">使用场景</span></h2><p style="text-indent: 2em; line-height: 1.5;"><span style="font-family: 宋体;">当关注一个事物的本质的时候，使用抽象类；当关注的是事物的行为的时候，使用接口。</span></p>', '不同点抽象类由abstract关键字修饰；接口由interface关键字修饰抽象类中可以存在普通成员函数；而接口中只能存在publicabstract方法（JDK8支持了静态方法、默认实现）抽象类的成员变量可以是任意类型的；而接口中的成员变量只能是publicstaticfinal类型的抽象类只能继承一个；但是接口可以实现多个抽象类的设计目的：代码复用，当不同的类具有某些相同的行为（记为集合A），且其中一部分行为的实现方式一致时（A的非真子集，记为B），可以将这些类都派生于一个抽象类。这个抽象类中实现了集合B，避免使所有的子类都实现B，从而达到代码复用的目的。而A-B的部分就是每个子类的差异化特性，有具体的子类自己实现；接口的设计目的：对类的行为进行有约束抽象类的定义是自下而上的（自下而上抽象）；接口的定义是自上而下的（自上而下约束）抽象类是对类本质的抽象，表达是isa的关系，抽象类包含并实现了子类的通用特性，将子类存在差异化的特性进行抽象，并由子类去实现；接口的话是对行为的抽象，表达是likea的关系，接口主要是定义行为，定义类可以做什么，至于实现类的主体是什么，如何实现，接口不关注相同点不能实例化派生类必须实现未实现的方法使用场景当关注一个事物的本质的时候，使用抽象类；当关注的是事物的行为的时候，使用接口。', 'Java,面试题', '', '', 1, 1, 5, 1, 2, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-09 15:19:10', '2021-08-09', '', '', '1', '581', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565127273520562176, 'List和Set的区别', 'List和Set的区别', '<h2>List</h2><p style="text-indent: 2em;">有序，可重复，允许多个 NULL 元素，可以用 Iterator 接口取得所有元素，也可以使用下标读取指定元素。</p><h2>Set</h2><p style="text-indent: 2em;">无序，不可重复，最多允许有一个 NULL 元素对象，取元素时只能用 Iterator 接口取得所有元素，在逐一遍历各个元素。</p>', 'List有序，可重复，允许多个NULL元素，可以用Iterator接口取得所有元素，也可以使用下标读取指定元素。Set无序，不可重复，最多允许有一个NULL元素对象，取元素时只能用Iterator接口取得所有元素，在逐一遍历各个元素。', 'Java,面试题,数据结构', '', '', 1, 1, 5, 1, 2, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-09 15:48:35', '2021-08-09', '', '', '1', '125', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565129201528864768, 'hashcode 和 equals', 'hashcode 和 equals', '<h2>hashcode 介绍</h2><p style="text-indent: 2em;">hashcode 方法的作用是获取是获取哈希码，也称散列码，它实际上是返回一个 int 整数，这个哈希码的作用是确定对象在哈希表的索引位置。hashcode 定义在 JDK 的 Object 类中，其注释表明：对同一个方法调用多次 hashcode 方法，必须一致的返回相同的整数，如果两个对象 equals 返回 true，则 hashcode 方法必须返回相同的整数。如果两个对象 equals 返回 false，则调用 hashcode 方法时这两个对象中的每一个都必须产生不同的整数结果。但是，程序员应该意识到为不相等的对象生成不同的整数结果可能会提高哈希表的性能。</p><p style="text-indent: 2em;">散列表存储的 key-value 的键值对，它的特点是：能根据键快速检索出对应的值。</p><h2>HashSet 如何检查重复</h2><p style="text-indent: 2em;">对象加入 HashSet 时，HashSet 首先会计算对象的 hashcode 值来判断对象加入的位置，看该位置是否有值，如果<u>没有</u>，HashSet 会假设对象没有重复出现。但是如果发现<u>有值</u>，这时会调用 equals 方法来检查两个对象是否真的相同，如果相同，HashSet 不会让加入操作成功，如果不同的话，就会散列的其他的位置，这样就大大减少了 equals 的次数，提高了执行速度。</p><h2>hashCode 和 equals 的区别和联系</h2><p style="text-indent: 2em;">两个对象相等，hashcode 一定相等</p><p style="text-indent: 2em;">两个对象相等，则对两个对象调用 equals 方法都应该返回 true</p><p style="text-indent: 2em;">两个对象 hashcode 相等，两个对象不一定相等</p><p style="text-indent: 2em;">两个对象 hashcode 不等，两个对象一定不等</p><p style="text-indent: 2em;">equals 方法如果被重写，则 hashcode 方法也应该重写，hashcode 的默认行为是对堆上的对象产生独特值，如果没有重写 hashcode，则某类的两个对象无论如何都不会相等 &nbsp; &nbsp;</p>', 'hashcode介绍hashcode方法的作用是获取是获取哈希码，也称散列码，它实际上是返回一个int整数，这个哈希码的作用是确定对象在哈希表的索引位置。hashcode定义在JDK的Object类中，其注释表明：对同一个方法调用多次hashcode方法，必须一致的返回相同的整数，如果两个对象equals返回true，则hashcode方法必须返回相同的整数。如果两个对象equals返回false，则调用hashcode方法时这两个对象中的每一个都必须产生不同的整数结果。但是，程序员应该意识到为不相等的对象生成不同的整数结果可能会提高哈希表的性能。散列表存储的key-value的键值对，它的特点是：能根据键快速检索出对应的值。HashSet如何检查重复对象加入HashSet时，HashSet首先会计算对象的hashcode值来判断对象加入的位置，看该位置是否有值，如果没有，HashSet会假设对象没有重复出现。但是如果发现有值，这时会调用equals方法来检查两个对象是否真的相同，如果相同，HashSet不会让加入操作成功，如果不同的话，就会散列的其他的位置，这样就大大减少了equals的次数，提高了执行速度。hashCode和equals的区别和联系两个对象相等，hashcode一定相等两个对象相等，则对两个对象调用equals方法都应该返回true两个对象hashcode相等，两个对象不一定相等两个对象hashcode不等，两个对象一定不等equals方法如果被重写，则hashcode方法也应该重写，hashcode的默认行为是对堆上的对象产生独特值，如果没有重写hashcode，则某类的两个对象无论如何都不会相等', 'Java,面试题', '', '', 1, 1, 5, 1, 2, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-09 23:40:32', '2021-08-09', '', '', '1', '776', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565155039951454208, 'Graphics2D 在 linux 上使用 Font 字体出现乱码或者中文字无法显示的问题', '做了一个根据文章标题自动生成文章略缩图的功能，本地（Windows环境）测试正常，上线后（Linux 环境）发现中文字体全部显示不出来，原因为 Linux 上没有中文字体库', '<p>第一步：在 <span style="color: rgb(225, 60, 57);">C:\\Windows\\Fonts</span> 盘符中找到对应的字体文件</p><p>第二步：在服务器上的 <span style="color: rgb(225, 60, 57);">/usr/share/fonts</span> 目录下建立一个新目录</p><pre><code class="language-bash">mkdir -p /usr/share/fonts/winFonts</code></pre><p>第三步：我们将需要的字体拷贝出来并上传至刚刚建立的目录下并授权</p><pre><code class="language-bash">chmod -R 755 /usr/share/fonts/winFonts</code></pre><p><img src="https://file.suntaoblog.com/upload/2023-02/17/3565173209235980288.png" alt="62d32833c533e42cd907467e5dd564ec.png" data-href="https://file.suntaoblog.com/upload/2023-02/17/3565173209235980288.png" style=""/></p><p>第四步：重启tomcat服务</p>', '第一步：在C:\\Windows\\Fonts盘符中找到对应的字体文件第二步：在服务器上的/usr/share/fonts目录下建立一个新目录mkdir-p/usr/share/fonts/winFonts第三步：我们将需要的字体拷贝出来并上传至刚刚建立的目录下并授权chmod-R755/usr/share/fonts/winFonts第四步：重启tomcat服务', 'Linux,Bug', '', '', 1, 1, 5, 1, 4, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-11 08:16:42', '2021-08-11', '', '', '1', '190', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565174241831682048, 'Java 实现根据文本内容自动生成图片', 'Java 实现根据文本内容自动生成图片', '<blockquote>缘起一个博客需求，做一个根据<strong>文章标题自动生成文章封面</strong>的功能</blockquote><h2>效果图</h2><p><img src="https://file.suntaoblog.com/upload/2023-02/17/3565176205831307264.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/17/3565176205831307264.png" style=""/></p><h2>工具类</h2><p>借助 Graphics2D 技术来实现该功能</p><p> ImageBuilderUtils.java &nbsp; </p><pre><code class="language-java">package com.github.stazxr.zblog.util.graphics;

import lombok.extern.slf4j.Slf4j;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.FileOutputStream;

/**
 * 动态生成图片工具类
 *
 * @author SunTao
 * @since 2021-08-11
 */
@Slf4j
@SuppressWarnings("all")
public class ImageBuilderUtils {
    /**
     * 根据图片文字动态生成图片
     *
     * @param content 内容
     * @param uploadPath 上传路径
     * @return 文件上传地址
     */
    public static String buildFontImage(String content, String uploadPath) {
        try {
            Font font = new Font("微软雅黑", Font.BOLD, 36);

            // 计算字体宽度和高度
            // FontDesignMetrics metrics = FontDesignMetrics.getMetrics(font); // 过时
            // int width = 0;
            // for (int i = 0; i &lt; content.length(); i++) {
            //     width += metrics.charWidth(content.charAt(i));
            // }
            // int height = metrics.getHeight();
            // int ascent = metrics.getAscent();
            // int leading = metrics.getLeading();

            FontMetrics fontMetrics = getFontMetrics(font);
            int width = fontMetrics.stringWidth(content);
            int height = fontMetrics.getHeight();
            int ascent = fontMetrics.getAscent();
            int leading = fontMetrics.getLeading();

            // 计算图片大小，设置图片信息，比例为16:9   height = width * (9 / 16)
            int imageWidth = width + 100;
            int imageHeight = imageWidth * 9 / 16;
            BufferedImage image = new BufferedImage(imageWidth, imageHeight, BufferedImage.TYPE_INT_RGB);

            // 获取画笔
            Graphics2D graphics = image.createGraphics();

            // 设置画笔的基本信息
            graphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
            graphics.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));
            graphics.setBackground(Color.BLACK);

            // 填充红色的正方形
            graphics.setColor(Color.BLACK);
            int rectX = (imageWidth - width) / 2;
            int rectY = (imageHeight - height) / 3;
            graphics.fillRect(rectX, rectY, width, height);

            // 填充文字
            graphics.setColor(Color.WHITE);
            graphics.setFont(font);
            graphics.drawString(content, rectX, rectY + ascent + leading);
            graphics.dispose();

            // 输出图片
            String savePath = uploadPath + "articleImgBuilder_" + System.currentTimeMillis() + ".jpg";
            ImageIO.write(image, "JPEG", new FileOutputStream(savePath));
            return savePath;
        } catch (Exception e) {
            log.error("生成文章略缩图失败", e);
            return "";
        }
    }

    private static FontMetrics getFontMetrics(Font font) {
        BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = image.createGraphics();
        return g.getFontMetrics(font);
    }
}
</code></pre><p>调用</p><pre><code class="language-java">// 调用
public static void main(String[] args) {
    try {
        // 本地生成封面：范围的结果为图片在本地生成的路径
        String filePath = ImageBuilderUtils.buildFontImage(title, FileUtils.SYS_TEM_DIR);

        // 将生成在本地的图片上传至对象存储（如果没有使用 OSS 等对象存储，不需要这部分代码）
        ......
    } catch (Exception e) {
        throw new ServiceException("封面自动生成失败，请选择其他封面类型", e);
    }
}</code></pre><p>代码优化扩展空间很大，网上题材也比较多，大家可以参考</p>', '缘起一个博客需求，做一个根据文章标题自动生成文章封面的功能效果图工具类借助Graphics2D技术来实现该功能ImageBuilderUtils.javapackagecom.github.stazxr.zblog.util.graphics;importlombok.extern.slf4j.Slf4j;importjavax.imageio.ImageIO;importjava.awt.*;importjava.awt.image.BufferedImage;importjava.io.FileOutputStream;/***动态生成图片工具类**@authorSunTao*@since2021-08-11*/@Slf4j@SuppressWarnings("all")publicclassImageBuilderUtils{/***根据图片文字动态生成图片**@paramcontent内容*@paramuploadPath上传路径*@return文件上传地址*/publicstaticStringbuildFontImage(Stringcontent,StringuploadPath){try{Fontfont=newFont("微软雅黑",Font.BOLD,36);//计算字体宽度和高度//FontDesignMetricsmetrics=FontDesignMetrics.getMetrics(font);//过时//intwidth=0;//for(inti=0;i&lt;content.length();i++){//width+=metrics.charWidth(content.charAt(i));//}//intheight=metrics.getHeight();//intascent=metrics.getAscent();//intleading=metrics.getLeading();FontMetricsfontMetrics=getFontMetrics(font);intwidth=fontMetrics.stringWidth(content);intheight=fontMetrics.getHeight();intascent=fontMetrics.getAscent();intleading=fontMetrics.getLeading();//计算图片大小，设置图片信息，比例为16:9height=width*(9/16)intimageWidth=width+100;intimageHeight=imageWidth*9/16;BufferedImageimage=newBufferedImage(imageWidth,imageHeight,BufferedImage.TYPE_INT_RGB);//获取画笔Graphics2Dgraphics=image.createGraphics();//设置画笔的基本信息graphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);graphics.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));graphics.setBackground(Color.BLACK);//填充红色的正方形graphics.setColor(Color.BLACK);intrectX=(imageWidth-width)/2;intrectY=(imageHeight-height)/3;graphics.fillRect(rectX,rectY,width,height);//填充文字graphics.setColor(Color.WHITE);graphics.setFont(font);graphics.drawString(content,rectX,rectY+ascent+leading);graphics.dispose();//输出图片StringsavePath=uploadPath+"articleImgBuilder_"+System.currentTimeMillis()+".jpg";ImageIO.write(image,"JPEG",newFileOutputStream(savePath));returnsavePath;}catch(Exceptione){log.error("生成文章略缩图失败",e);return"";}}privatestaticFontMetricsgetFontMetrics(Fontfont){BufferedImageimage=newBufferedImage(1,1,BufferedImage.TYPE_INT_ARGB);Graphics2Dg=image.createGraphics();returng.getFontMetrics(font);}}调用//调用publicstaticvoidmain(String[]args){try{//本地生成封面：范围的结果为图片在本地生成的路径StringfilePath=ImageBuilderUtils.buildFontImage(title,FileUtils.SYS_TEM_DIR);//将生成在本地的图片上传至对象存储（如果没有使用OSS等对象存储，不需要这部分代码）......}catch(Exceptione){thrownewServiceException("封面自动生成失败，请选择其他封面类型",e);}}代码优化扩展空间很大，网上题材也比较多，大家可以参考', 'Java', '', '', 4, 1, 5, 1, 2, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-11 08:35:23', '2021-08-11', 'suntao', '2023-02-17 00:27:44', '1', '3312', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565179076987584512, '手动创建 MultipartFile 简化文件上传测试流程', '手动创建 MultipartFile 简化文件上传测试流程', '<blockquote> 原文链接：<a href="https://blog.csdn.net/qq_37157160/article/details/104512457" target="_blank"><span style="color: rgb(54, 88, 226);">https://blog.csdn.net/qq_37157160/article/details/104512457</span></a><span style="color: rgb(54, 88, 226);"> </span></blockquote><h2>第一种方式（亲测有效）</h2><pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;</code></pre><pre><code class="language-java">java.io.File file = new java.io.File(filePath);
FileInputStream fileInputStream = new FileInputStream(filePath);
MultipartFile multipartFile = new MockMultipartFile(file.getName(), file.getName(), null, fileInputStream);</code></pre><h2>第二种方式</h2><p><span style="color: rgb(77, 77, 77); background-color: rgb(255, 255, 255); font-size: 16px;">org.apache.commons.fileupload.disk.DiskFileItem</span></p><pre><code class="language-java">FileItem fileItem = new DiskFileItem("file", Files.probeContentType(file.toPath()), false, file.getName(), (int) file.length(), file.getParentFile());
IOUtils.copy(new FileInputStream(file), fileItem.getOutputStream());
MultipartFile multipartFile = new CommonsMultipartFile(fileItem);</code></pre><p><br></p>', '原文链接：https://blog.csdn.net/qq_37157160/article/details/104512457第一种方式（亲测有效）&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;java.io.Filefile=newjava.io.File(filePath);FileInputStreamfileInputStream=newFileInputStream(filePath);MultipartFilemultipartFile=newMockMultipartFile(file.getName(),file.getName(),null,fileInputStream);第二种方式org.apache.commons.fileupload.disk.DiskFileItemFileItemfileItem=newDiskFileItem("file",Files.probeContentType(file.toPath()),false,file.getName(),(int)file.length(),file.getParentFile());IOUtils.copy(newFileInputStream(file),fileItem.getOutputStream());MultipartFilemultipartFile=newCommonsMultipartFile(fileItem);', 'Java,MultipartFile', 'https://blog.csdn.net/qq_37157160/article/details/104512457', '', 3, 2, 5, 1, 2, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-11 08:39:04', '2021-08-11', '', '', '1', '778', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565182063764045824, 'ArrayList 和 LinkedList 的区别', 'ArrayList 和 LinkedList 的区别', '<h2>ArrayList</h2><p style="text-indent: 2em; line-height: 1.5;">基于动态数组，占据连续的存储空间，适合下标访问（随机访问）。扩容机制：因为数组的长度固定，超出长度存储数据时会创建一个新的数组，然后将老数组的数据拷贝到新数组，并且如果不是在尾部插入或删除元素，都会涉及到元素的移动（往后复制一份，插入新元素）。使用<span style="color: rgb(225, 60, 57);">尾插法并指定初始容量</span>（容量其实就是底层数组的长度）可以极大的提升性能、甚至超过 LinkedList （需要创建大量的 Node 对象）。</p><h2>LinkedList</h2><p style="text-indent: 2em;">基于链表，存储在分散的内存中，适合做数据插入和删除，不适合查询（查询过程需要逐一遍历）。便利 LinkedList 实际是通过 Iterator 获取到所有节点，然后逐一便利，另外在for循环中，<span style="color: rgb(225, 60, 57);">每一次获取元素 get(i) 其实都需要对 list 进行重新便利</span>，性能消耗极大！</p><h2>深入解读</h2><p style="text-indent: 2em;">从代码成面分析 ArrayList 和 LinkedList 的上述区别，PS：代码注释只是个人理解，有误请指出，谢谢！</p><h3>ArrayList 源码</h3><pre><code class="language-java">// 默认初始化容量.
private static final int DEFAULT_CAPACITY = 10;

// 官方翻译：用于创建一个默认容量的空实例的共享空数组实例
// 不是很理解，只是在calculateCapacity方法中发现了他的一个作用
// 另外在空构造方法中将这个值赋值给了elementData
private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};

// 底层数组，用于存放数据.
transient Object[] elementData;

// ArrayList中的元素个数
private int size;

// 底层数组的最大长度（即ArrayList的最大容量）
private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;

// 此处列举了一个add方法，其他类似
public boolean add(E e) {
	// 检查elementData是否可以存放新的元素，不可以则进行扩容
	ensureCapacityInternal(size + 1);

	// 赋值
	elementData[size++] = e;
	return true;
}

private void ensureCapacityInternal(int minCapacity) {
	ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));
}

// 计算当前存放元素需要的最小容量是多少（需要elementData的长度是多少才能存放下新元素）
private static int calculateCapacity(Object[] elementData, int minCapacity) {
	// 使用 ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;() 方法创建的列表默认容量为DEFAULT_CAPACITY;
	if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
		return Math.max(DEFAULT_CAPACITY, minCapacity);
	}

	// 其他方式创建的列表返回：ArrayList中的元素个数 + 1
	// 其实就是用这个值与 elementData.length 作比较，看 elementData 是否可以存放新元素
	return minCapacity;
}

private void ensureExplicitCapacity(int minCapacity) {
	// 操作计数器加一!!
	modCount++;

	// 如果 minCapacity 大于 elementData.length，则需要进行扩容
	if (minCapacity - elementData.length &gt; 0)
		grow(minCapacity);
}

// 扩容代码
private void grow(int minCapacity) {
	// 获取旧的容量
	int oldCapacity = elementData.length;
	// 新容量计算公司
	int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);
	// 如果计算的新容量小于添加元素需要的最小容量，则newCapacity = minCapacity
	if (newCapacity - minCapacity &lt; 0)
		newCapacity = minCapacity;
	// 如果新容量大于MAX_ARRAY_SIZE，则检查新容量大小，确保不溢出！
	if (newCapacity - MAX_ARRAY_SIZE &gt; 0)
		newCapacity = hugeCapacity(minCapacity);

	// 赋值老数组的数组给新数组，并指定数组长度
	// !!! 每一次扩容其实都涉及元素的全量赋值，所以在知道列表容量的时候，尽量指定初始容量
	elementData = Arrays.copyOf(elementData, newCapacity);
}


// 获取最大容量
private static int hugeCapacity(int minCapacity) {
	if (minCapacity &lt; 0)
		throw new OutOfMemoryError();
	return (minCapacity &gt; MAX_ARRAY_SIZE) ?
		Integer.MAX_VALUE :
		MAX_ARRAY_SIZE;
}</code></pre><h3>LinkedList 为什么 for 循环便利对性能损耗高？</h3><p><br></p><pre><code class="language-java">// 链表长度
transient int size = 0;

// 第一个节点
transient Node&lt;E&gt; first;

// 最后一个节点
transient Node&lt;E&gt; last;

// 在LinkedList中，每一个节点都是一个Node对象
private static class Node&lt;E&gt; {
	// 存放的数据
	E item;
	// 下一个节点
	Node&lt;E&gt; next;
	// 上一个节点
	Node&lt;E&gt; prev;

	Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) {
		this.item = element;
		this.next = next;
		this.prev = prev;
	}
}

// 根据下标获取元素
public E get(int index) {
    // 检查下标是否越界
	checkElementIndex(index);

	// 可以发现get方法会调用node方法，从而对链表进行了一次便利！
	return node(index).item;
}

// 返回指定元素索引处的节点。
Node&lt;E&gt; node(int index) {
	// 对查询做了优化，如果索引大于size / 2，就从尾部开始搜索元素
	if (index &lt; (size &gt;&gt; 1)) {
		Node&lt;E&gt; x = first;
		for (int i = 0; i &lt; index; i++)
			x = x.next;
		return x;
	} else {
		Node&lt;E&gt; x = last;
		for (int i = size - 1; i &gt; index; i--)
			x = x.prev;
		return x;
	}
}

// 在尾部添加元素
public boolean add(E e) {
	linkLast(e);
	return true;
}

// 在指定下标的位置添加元素
public void add(int index, E element) {
	// 检查index是否小于size + 1 (注意，跟get方法不一样！);
	checkPositionIndex(index);

	if (index == size)
		linkLast(element);
	else
		linkBefore(element, node(index));
}

// 尾部插入元素
void linkLast(E e) {
    // 原Last节点作为新增节点的prev节点
	final Node&lt;E&gt; l = last;
	// 创建新增节点，所以每次新增元素都会创建一个Node对象
	final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);
	// 新增的节点将作为last节点
	last = newNode;

	// 如果last节点为Null，则说明是第一次添加节点
	if (l == null)
		first = newNode;
	else
		// 否则，原last的节点的last为新增节点
		l.next = newNode;

	// 容量加一
	size++;
	// 操作计数器加一
	modCount++;
}

// 在某个节点前添加元素，原理跟linkLast大同小异
// 开始怀疑succ为null怎么办，经测试，发现第一次调用add(1, "first")方法，会走到linkLast("first")...
void linkBefore(E e, Node&lt;E&gt; succ) {
	final Node&lt;E&gt; pred = succ.prev;
	final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ);
	succ.prev = newNode;
	if (pred == null)
		first = newNode;
	else
		pred.next = newNode;
	size++;
	modCount++;
}</code></pre><p><br></p>', 'ArrayList基于动态数组，占据连续的存储空间，适合下标访问（随机访问）。扩容机制：因为数组的长度固定，超出长度存储数据时会创建一个新的数组，然后将老数组的数据拷贝到新数组，并且如果不是在尾部插入或删除元素，都会涉及到元素的移动（往后复制一份，插入新元素）。使用尾插法并指定初始容量（容量其实就是底层数组的长度）可以极大的提升性能、甚至超过LinkedList（需要创建大量的Node对象）。LinkedList基于链表，存储在分散的内存中，适合做数据插入和删除，不适合查询（查询过程需要逐一遍历）。便利LinkedList实际是通过Iterator获取到所有节点，然后逐一便利，另外在for循环中，每一次获取元素get(i)其实都需要对list进行重新便利，性能消耗极大！深入解读从代码成面分析ArrayList和LinkedList的上述区别，PS：代码注释只是个人理解，有误请指出，谢谢！ArrayList源码//默认初始化容量.privatestaticfinalintDEFAULT_CAPACITY=10;//官方翻译：用于创建一个默认容量的空实例的共享空数组实例//不是很理解，只是在calculateCapacity方法中发现了他的一个作用//另外在空构造方法中将这个值赋值给了elementDataprivatestaticfinalObject[]DEFAULTCAPACITY_EMPTY_ELEMENTDATA={};//底层数组，用于存放数据.transientObject[]elementData;//ArrayList中的元素个数privateintsize;//底层数组的最大长度（即ArrayList的最大容量）privatestaticfinalintMAX_ARRAY_SIZE=Integer.MAX_VALUE-8;//此处列举了一个add方法，其他类似publicbooleanadd(Ee){//检查elementData是否可以存放新的元素，不可以则进行扩容ensureCapacityInternal(size+1);//赋值elementData[size++]=e;returntrue;}privatevoidensureCapacityInternal(intminCapacity){ensureExplicitCapacity(calculateCapacity(elementData,minCapacity));}//计算当前存放元素需要的最小容量是多少（需要elementData的长度是多少才能存放下新元素）privatestaticintcalculateCapacity(Object[]elementData,intminCapacity){//使用ArrayList&lt;String&gt;list=newArrayList&lt;&gt;()方法创建的列表默认容量为DEFAULT_CAPACITY;if(elementData==DEFAULTCAPACITY_EMPTY_ELEMENTDATA){returnMath.max(DEFAULT_CAPACITY,minCapacity);}//其他方式创建的列表返回：ArrayList中的元素个数+1//其实就是用这个值与elementData.length作比较，看elementData是否可以存放新元素returnminCapacity;}privatevoidensureExplicitCapacity(intminCapacity){//操作计数器加一!!modCount++;//如果minCapacity大于elementData.length，则需要进行扩容if(minCapacity-elementData.length&gt;0)grow(minCapacity);}//扩容代码privatevoidgrow(intminCapacity){//获取旧的容量intoldCapacity=elementData.length;//新容量计算公司intnewCapacity=oldCapacity+(oldCapacity&gt;&gt;1);//如果计算的新容量小于添加元素需要的最小容量，则newCapacity=minCapacityif(newCapacity-minCapacity&lt;0)newCapacity=minCapacity;//如果新容量大于MAX_ARRAY_SIZE，则检查新容量大小，确保不溢出！if(newCapacity-MAX_ARRAY_SIZE&gt;0)newCapacity=hugeCapacity(minCapacity);//赋值老数组的数组给新数组，并指定数组长度//!!!每一次扩容其实都涉及元素的全量赋值，所以在知道列表容量的时候，尽量指定初始容量elementData=Arrays.copyOf(elementData,newCapacity);}//获取最大容量privatestaticinthugeCapacity(intminCapacity){if(minCapacity&lt;0)thrownewOutOfMemoryError();return(minCapacity&gt;MAX_ARRAY_SIZE)?Integer.MAX_VALUE:MAX_ARRAY_SIZE;}LinkedList为什么for循环便利对性能损耗高？//链表长度transientintsize=0;//第一个节点transientNode&lt;E&gt;first;//最后一个节点transientNode&lt;E&gt;last;//在LinkedList中，每一个节点都是一个Node对象privatestaticclassNode&lt;E&gt;{//存放的数据Eitem;//下一个节点Node&lt;E&gt;next;//上一个节点Node&lt;E&gt;prev;Node(Node&lt;E&gt;prev,Eelement,Node&lt;E&gt;next){this.item=element;this.next=next;this.prev=prev;}}//根据下标获取元素publicEget(intindex){//检查下标是否越界checkElementIndex(index);//可以发现get方法会调用node方法，从而对链表进行了一次便利！returnnode(index).item;}//返回指定元素索引处的节点。Node&lt;E&gt;node(intindex){//对查询做了优化，如果索引大于size/2，就从尾部开始搜索元素if(index&lt;(size&gt;&gt;1)){Node&lt;E&gt;x=first;for(inti=0;i&lt;index;i++)x=x.next;returnx;}else{Node&lt;E&gt;x=last;for(inti=size-1;i&gt;index;i--)x=x.prev;returnx;}}//在尾部添加元素publicbooleanadd(Ee){linkLast(e);returntrue;}//在指定下标的位置添加元素publicvoidadd(intindex,Eelement){//检查index是否小于size+1(注意，跟get方法不一样！);checkPositionIndex(index);if(index==size)linkLast(element);elselinkBefore(element,node(index));}//尾部插入元素voidlinkLast(Ee){//原Last节点作为新增节点的prev节点finalNode&lt;E&gt;l=last;//创建新增节点，所以每次新增元素都会创建一个Node对象finalNode&lt;E&gt;newNode=newNode&lt;&gt;(l,e,null);//新增的节点将作为last节点last=newNode;//如果last节点为Null，则说明是第一次添加节点if(l==null)first=newNode;else//否则，原last的节点的last为新增节点l.next=newNode;//容量加一size++;//操作计数器加一modCount++;}//在某个节点前添加元素，原理跟linkLast大同小异//开始怀疑succ为null怎么办，经测试，发现第一次调用add(1,"first")方法，会走到linkLast("first")...voidlinkBefore(Ee,Node&lt;E&gt;succ){finalNode&lt;E&gt;pred=succ.prev;finalNode&lt;E&gt;newNode=newNode&lt;&gt;(pred,e,succ);succ.prev=newNode;if(pred==null)first=newNode;elsepred.next=newNode;size++;modCount++;}', 'Java,源码,面试题', '', '', 1, 1, 5, 1, 2, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-11 18:38:58', '2021-08-11', 'suntao', '2023-02-17 00:58:38', '1', '4272', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565187224347607040, '什么是字节码？', '什么是字节码？', '<blockquote>JVM 能够理解的代码就是字节码。</blockquote><p style="text-indent: 2em;">Java 程序运行步骤：Java 源代码（.java） → 编译器（javac） → JVM 可以执行的字节码文件（.class） → JVM 中的解释器 → 机器可执行的二进制机器码 → 程序运行</p><p style="text-indent: 2em;">字节码是由 Java 源代码编译产生，可以由 JVM 解释器解释为机器码。字节码不面向任何特定的处理器，只面向 JVM，每一种平台的解释器都是不同的（因为不同处理器底层的指令机器码是不同的），虚拟机的作用就是把每一条要执行的指令发送给解释器，解释器将字节码翻译成特定平台能够识别的机器码，然后在机器上运行。所以 Java 是编译与解释共存的。优点：Java 语言通过字节码的形式，在一定程序上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言的可移植的特点，所以 Java 语言有了“一次编译，到处运行”的说法。</p>', 'JVM能够理解的代码就是字节码。Java程序运行步骤：Java源代码（.java）→编译器（javac）→JVM可以执行的字节码文件（.class）→JVM中的解释器→机器可执行的二进制机器码→程序运行字节码是由Java源代码编译产生，可以由JVM解释器解释为机器码。字节码不面向任何特定的处理器，只面向JVM，每一种平台的解释器都是不同的（因为不同处理器底层的指令机器码是不同的），虚拟机的作用就是把每一条要执行的指令发送给解释器，解释器将字节码翻译成特定平台能够识别的机器码，然后在机器上运行。所以Java是编译与解释共存的。优点：Java语言通过字节码的形式，在一定程序上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言的可移植的特点，所以Java语言有了“一次编译，到处运行”的说法。', 'Java,面试题', '', '', 1, 1, 5, 1, 2, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-12 16:15:10', '2021-08-12', '', '', '1', '377', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565191236677533696, 'Java 类加载器有哪些？', 'Java 类加载器有哪些？', '<blockquote>JDK自带有三个类加载器：bootstrap类加载器，ext类加载器，app类加载器</blockquote><h2>BootstrapClassLoader</h2><p style="text-indent: 2em;">ExtClassLoader 的父类加载器（parent 属性指定），默认负责加载 %JAVA_HOME%/lib 下的 Jar 包和Class文件（rt.jar）。</p><h2>ExtClassLoader</h2><p style="text-indent: 2em;">扩展类加载器，AppClassLoader 的父类加载器（parent 属性指定），负责加载 %JAVA_HOME%/lib/ext 目录下的 Jar 包和 Class 文件。</p><p><img src="https://file.suntaoblog.com/upload/2023-02/17/3565192480817152000.png" alt="575cecae466b86b2e04602e18f055627.png" data-href="https://file.suntaoblog.com/upload/2023-02/17/3565192480817152000.png" style=""/></p><h2>AppClassLoader</h2><p style="text-indent: 2em;">系统类加载器，线程上下文类加载器，自定义类加载器的父类加载器（parent属性指定），负责加载classPath下的类文件。</p><p><img src="https://file.suntaoblog.com/upload/2023-02/17/3565192823454040064.png" alt="cf57bee4f1f619c71be5bef13e6e1508.png" data-href="https://file.suntaoblog.com/upload/2023-02/17/3565192823454040064.png" style=""/></p><h2>自定义类加载器</h2><p style="text-indent: 2em;">继承 ClassLoader 实现自定义类加载器。</p>', 'JDK自带有三个类加载器：bootstrap类加载器，ext类加载器，app类加载器BootstrapClassLoaderExtClassLoader的父类加载器（parent属性指定），默认负责加载%JAVA_HOME%/lib下的Jar包和Class文件（rt.jar）。ExtClassLoader扩展类加载器，AppClassLoader的父类加载器（parent属性指定），负责加载%JAVA_HOME%/lib/ext目录下的Jar包和Class文件。AppClassLoader系统类加载器，线程上下文类加载器，自定义类加载器的父类加载器（parent属性指定），负责加载classPath下的类文件。自定义类加载器继承ClassLoader实现自定义类加载器。', 'Java,JVM,面试题', '', '', 1, 1, 5, 1, 2, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-12 16:40:28', '2021-08-12', '', '', '1', '355', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565194084098244608, '双亲委派模型', '双亲委派模型', '<p><img src="https://file.suntaoblog.com/upload/2023-02/17/3565194399056920576.png" alt="9a65f6a6953c0e3180782e4a66b900c2.png" data-href="https://file.suntaoblog.com/upload/2023-02/17/3565194399056920576.png" style=""/></p><p>双亲委托模型的好处：</p><p>1、主要是为了安全性，避免用户自己编写的类动态替换了 Java 的核心类；</p><p>2、同时避免了类的重复加载，在 JVM 中，区分一个类需要从两方面考虑：全路径类名和 ClassLoader</p>', '双亲委托模型的好处：1、主要是为了安全性，避免用户自己编写的类动态替换了Java的核心类；2、同时避免了类的重复加载，在JVM中，区分一个类需要从两方面考虑：全路径类名和ClassLoader', 'Java,JVM,面试题', '', '', 1, 1, 5, 1, 2, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-12 23:55:30', '2021-08-12', '', '', '1', '101', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565195624078901248, 'Java 中的异常体系', 'Java 中的异常体系', '<p>异常模型：</p><p><img src="https://file.suntaoblog.com/upload/2023-02/17/3565196375337467904.png" alt="4978a031558d23d4c7c5168ccb6a982f.png" data-href="https://file.suntaoblog.com/upload/2023-02/17/3565196375337467904.png" style=""/></p><p style="text-indent: 2em;">在 Java 中所有的异常都来自顶级父类 Throwable，Throwable 下有两个子类，Exception 和 Error。Error 是程序无法处理的错误，一旦出现这个错误，程序将停止运行。Exception 不会导致程序停止，又分为两个分支，运行时异常和受检查异常，运行时异常发生在程序运行过程中，出现后会导致程序当前线程执行失败，受检查异常发生在程序编译期间，需要做捕获或抛出处理，发生在编译期间。</p>', '异常模型：在Java中所有的异常都来自顶级父类Throwable，Throwable下有两个子类，Exception和Error。Error是程序无法处理的错误，一旦出现这个错误，程序将停止运行。Exception不会导致程序停止，又分为两个分支，运行时异常和受检查异常，运行时异常发生在程序运行过程中，出现后会导致程序当前线程执行失败，受检查异常发生在程序编译期间，需要做捕获或抛出处理，发生在编译期间。', 'Java,Java异常,面试题', '', '', 1, 1, 5, 1, 2, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-13 00:14:14', '2021-08-13', '', '', '1', '211', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565197022904451072, 'GC 如何判断对象可以被回收？', 'GC 如何判断对象可以被回收？', '<h2>引用计数法</h2><p style="text-indent: 2em;">每个对象有一个引用计数属性，新增一个引用时计数加一，引用释放时计数减一，当计数为零时可以被回收。</p><p style="text-indent: 2em;">引用计数法，可能会出现循环引用从而导致对象永远无法被回收，GC Roots的对象有：虚拟机栈（栈帧中的本地变量表）中引用的对象，方法区中类静态属性引用的对象方法区红中常量引用的对象，本地方法栈中 JNI（Native 方法）引用的对象。</p><h2>可达性分析法</h2><p style="text-indent: 2em; text-align: left;">从 GC Roots 开始向下搜索，搜索所走过的路径成为引用链。当一个对象到 GC Roots 没有任何引用链相连时，则证明此对象是不可用的。那么虚拟机判断是可回收对象</p><p style="text-indent: 2em;">可达性分析算法中不可达对象并不是立即死亡的，对象被系统宣告死亡至少要经过两轮的标记：第一次是经过可达性算法分析发现没有与 GC Roots 相连接的引用链，第二次是在由虚拟机自动建立的 Finalizer 队列中判断是否需要执行 finalize 方法，当对象变成不可达时，GC 会判断该对象是否覆盖了 finalize 方法，若未覆盖，则直接将其回收。否则，若对象未执行过 finalize 方法，将其放入 F-Queue 队列，由一低优先级线程执行该队列中对象的 finalize 方法。执行 finalize 方法完毕后，GC 会再次判断该对象是否可达，若不可达则回收，否则对象“复活”，每个对象只能触发一次 finalize 方法。</p>', '引用计数法每个对象有一个引用计数属性，新增一个引用时计数加一，引用释放时计数减一，当计数为零时可以被回收。引用计数法，可能会出现循环引用从而导致对象永远无法被回收，GCRoots的对象有：虚拟机栈（栈帧中的本地变量表）中引用的对象，方法区中类静态属性引用的对象方法区红中常量引用的对象，本地方法栈中JNI（Native方法）引用的对象。可达性分析法从GCRoots开始向下搜索，搜索所走过的路径成为引用链。当一个对象到GCRoots没有任何引用链相连时，则证明此对象是不可用的。那么虚拟机判断是可回收对象可达性分析算法中不可达对象并不是立即死亡的，对象被系统宣告死亡至少要经过两轮的标记：第一次是经过可达性算法分析发现没有与GCRoots相连接的引用链，第二次是在由虚拟机自动建立的Finalizer队列中判断是否需要执行finalize方法，当对象变成不可达时，GC会判断该对象是否覆盖了finalize方法，若未覆盖，则直接将其回收。否则，若对象未执行过finalize方法，将其放入F-Queue队列，由一低优先级线程执行该队列中对象的finalize方法。执行finalize方法完毕后，GC会再次判断该对象是否可达，若不可达则回收，否则对象“复活”，每个对象只能触发一次finalize方法。', 'Java,JVM,面试题', '', '', 1, 1, 5, 1, 2, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2021-08-13 00:39:40', '2021-08-13', '', '', '1', '581', null, null, null);
INSERT INTO article (ID, TITLE, REMARK, CONTENT, CONTENT_MD, KEYWORDS, REPRINT_LINK, REPRINT_DESC, COVER_IMAGE_TYPE, ARTICLE_TYPE, ARTICLE_STATUS, ARTICLE_PERM, CATEGORY_ID, AUTHOR_ID, COMMENT_FLAG, `DESC`, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME, EXTEND1, EXTEND2, EXTEND3, EXTEND4, EXTEND5) VALUES (3565201754909835264, '网站 3.2 上线公告', '网站 3.2 上线公告', '<p style="text-align: start; line-height: 1.5;"><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;">3.2 版本将于 </span><span style="color: rgb(225, 60, 57); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;"><strong>2022-06-20</strong></span><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;"> 上线，相对于当前版本（3.0.0）来说</span></p><ul><li style="text-align: start; line-height: 1.5;"><span style="font-family: 宋体;">前端排版优化，抽取公共模板</span></li><li style="text-align: start; line-height: 1.5;"><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;">服务器监控功能开发</span></li><li style="text-align: start; line-height: 1.5;"><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;">移除 OMS 相关的代码</span></li><li style="text-align: start; line-height: 1.5;"><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;">字典管理功能优化，解决字典子表编辑删除按钮点击无效的问题</span></li><li style="text-align: start; line-height: 1.5;"><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;">新增网站主题管理的功能，支持动态修改网站的前端主题</span></li></ul><p style="text-align: start; line-height: 1.5;"><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;">相关页面展示：</span></p><h2 style="text-align: start; line-height: 1.5;"><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;">服务器监控</span></h2><p style="text-align: start; line-height: 1.5;"><img src="https://file.suntaoblog.com/upload/2023-02/17/3565216735663489024.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/17/3565216735663489024.png" style=""></p><h2 style="text-align: start; line-height: 1.5;"><span style="color: rgb(76, 73, 72); background-color: rgb(255, 255, 255); font-size: 16px; font-family: 宋体;">主题管理</span></h2><p style="text-align: start; line-height: 1.5;"><img src="https://file.suntaoblog.com/upload/2023-02/17/3565216825039912960.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/17/3565216825039912960.png" style=""></p><p style="text-align: start; line-height: 1.5;"><img src="https://file.suntaoblog.com/upload/2023-02/17/3565217042606850048.png" alt="image.png" data-href="https://file.suntaoblog.com/upload/2023-02/17/3565217042606850048.png" style=""></p>', '3.2版本将于2022-06-20上线，相对于当前版本（3.0.0）来说前端排版优化，抽取公共模板服务器监控功能开发移除OMS相关的代码字典管理功能优化，解决字典子表编辑删除按钮点击无效的问题新增网站主题管理的功能，支持动态修改网站的前端主题相关页面展示：服务器监控主题管理', '随笔,网站公告', '', '', 1, 1, 5, 1, 11, 3564691071097110528, 1, '审核通过', 0, 1, 'suntao', '2022-06-19 18:21:12', '2022-06-19', '', '', '1', '142', null, null, null);


/*Table structure for table `article_content_draft_record` */
DROP TABLE IF EXISTS `article_content_draft_record`;
CREATE TABLE `article_content_draft_record` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `ARTICLE_ID` BIGINT(64) NOT NULL COMMENT '文章编号',
  `REMARK` VARCHAR(250) NOT NULL DEFAULT '' COMMENT '文章概要',
  `COUNT` VARCHAR(200) DEFAULT NULL COMMENT '文章字数',
  `CONTENT` TEXT NOT NULL COMMENT '文章内容: 65535 / 16,777,215',
  `SAVE_TIME` VARCHAR(50) NOT NULL COMMENT '自动保存时间',
  PRIMARY KEY (`ID`) USING BTREE,
  KEY `INDEX_KEY_ARTICLE_ID` (`ARTICLE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='文章内容草稿记录表';

/*Table structure for table `article_auto_publish_timing` */
DROP TABLE IF EXISTS `article_auto_publish_timing`;
CREATE TABLE `article_auto_publish_timing` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `ARTICLE_ID` BIGINT(64) NOT NULL COMMENT '文章编号',
  `PUBLISH_TIME` VARCHAR(50) NOT NULL COMMENT '消息发布时间: yyyy-MM-dd HH:mm',
  `PRODUCER_TIME` VARCHAR(20) NOT NULL COMMENT '消息生产时间: yyyy-MM-dd HH:mm:ss',
  `CONSUMER_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '消息消费时间: yyyy-MM-dd HH:mm:ss',
  `CONSUMED` TINYINT(1) DEFAULT 0 COMMENT '消息是否被消费',
  `VALID` TINYINT(1) DEFAULT 1 COMMENT '消息是否有效',
  `DESC` VARCHAR(100) DEFAULT NULL DEFAULT '' COMMENT '备注',
  PRIMARY KEY (`ID`) USING BTREE,
  KEY `INDEX_KEY_ARTICLE_ID` (`ARTICLE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='文章自动发布状态记录表';

/*Table structure for table `friend_link` */
DROP TABLE IF EXISTS `friend_link`;
CREATE TABLE `friend_link` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `NAME` VARCHAR(50) NOT NULL COMMENT '链接名称',
  `HEAD_URL` VARCHAR(1000) NOT NULL DEFAULT '' COMMENT '头像地址',
  `LINK_URL` VARCHAR(1000) NOT NULL COMMENT '链接地址',
  `LINK_REMARK` VARCHAR(200) NOT NULL DEFAULT '' COMMENT '链接介绍',
  `VALID` TINYINT(1) DEFAULT 1 COMMENT '是否有效',
  `DELETED` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '是否删除',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE,
  KEY `INDEX_KEY_NAME` (`NAME`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='友链表';

/*Table structure for table `website_config` */
DROP TABLE IF EXISTS `website_config`;
CREATE TABLE `website_config` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `NAME` VARCHAR(50) NOT NULL COMMENT '配置名称',
  `CONFIG` TEXT NOT NULL COMMENT '配置信息',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='网站配置信息表';

/*Data for the table `website_config` */
INSERT INTO website_config (ID, NAME, CONFIG, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (1, '网站信息', '{"socialLoginList":[],"websiteAdminLink":"https://admin.suntaoblog.com","websiteAuthor":"恋长安兮","websiteAvatar":"https://file.suntaoblog.com/upload/2023-02/17/3565220826456260608.png","websiteCreateTime":"2021-03-21","websiteIntro":"大浪淘沙，荣辱不惊。","websiteLink":"https://www.suntaoblog.com","websiteName":"孙涛个人博客","websiteNotice":"博客问题交流群：760210629\\n仓库地址：https://github.com/stazxr/zblog\\n相关文档：建设中\\n当前进展：页面优化中，数据迁移中","websiteRecordNo":"陕ICP备2021003044号-1"}', 17, 'admin', '2022-12-08 17:06:00', '2022-12-08', '', '');
INSERT INTO website_config (ID, NAME, CONFIG, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (2, '社交信息', '{"csdn":"","gitee":"","github":"","qq":"","weChat":""}', 16, 'admin', '2022-12-08 17:06:00', '2022-12-08', '', '');
INSERT INTO website_config (ID, NAME, CONFIG, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3, '其他设置', '{"alipayQrCode":"https://file.suntaoblog.com/upload/2023-02/17/3565221664612417536.jpg","articleCover":"https://file.suntaoblog.com/upload/2023-02/17/3565221335313416192.png","articleSearchStrategy":"mysql","articleViewInterval":0,"isCommentReview":1,"isEmailNotice":0,"isMessageReview":1,"isMusicPlayer":0,"isReward":1,"touristAvatar":"https://file.suntaoblog.com/upload/2023-02/17/3565221129431810048.png","userAvatar":"https://file.suntaoblog.com/upload/2023-02/17/3565220996363321344.png","weiXinQrCode":"https://file.suntaoblog.com/upload/2023-02/17/3565221645289259008.jpg"}', 15, 'admin', '2022-12-08 17:06:00', '2022-12-08', '', '');

/*Table structure for table `visitor` */
DROP TABLE IF EXISTS `visitor`;
CREATE TABLE `visitor` (
  `ID` VARCHAR(32) NOT NULL,
  `ADDRESS_IP` VARCHAR(50) NOT NULL COMMENT '访问地址',
  `OS_NAME` VARCHAR(100) NOT NULL DEFAULT '' COMMENT '操作系统',
  `BROWSER_NAME` VARCHAR(100) NOT NULL DEFAULT '' COMMENT '浏览器名称',
  `PROVINCE` VARCHAR(100) NOT NULL DEFAULT '' COMMENT '省份',
  `AREA_CODE` VARCHAR(50) NOT NULL DEFAULT '' COMMENT '地域编码',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='访客表';

/*Table structure for table `visitor_area` */
DROP TABLE IF EXISTS `visitor_area`;
CREATE TABLE `visitor_area` (
  `AREA` VARCHAR(50) NOT NULL COMMENT '访问地域',
  `AREA_COUNT` INT(11) NOT NULL DEFAULT 1 COMMENT '访问量',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  UNIQUE KEY `KEY_AREA` (`AREA`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='访客地域表';

/*Table structure for table `visitor_count` */
DROP TABLE IF EXISTS `visitor_count`;
CREATE TABLE `visitor_count` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `WEB_COUNT` INT(11) NOT NULL DEFAULT 1 COMMENT '访问量',
  `DATA_DATE` VARCHAR(20) COMMENT '数据日期: YYYY-MM-DD',
  PRIMARY KEY (`ID`) USING BTREE,
  UNIQUE KEY `KEY_DATA_DATE` (`DATA_DATE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='访客数统计表';

/*Data for the table `visitor_count` */
INSERT INTO visitor_count (ID, WEB_COUNT, DATA_DATE) VALUES (1, 0, NULL);

/*Table structure for table `talk` */
DROP TABLE IF EXISTS `talk`;
CREATE TABLE `talk` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `CONTENT` TEXT NOT NULL COMMENT '说说内容',
  `IMAGES` TEXT COMMENT '图片列表',
  `STATUS` INT(2) NOT NULL COMMENT '说说状态',
  `IS_TOP` TINYINT(1) DEFAULT 0 COMMENT '是否置顶',
  `DELETED` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '是否删除',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE,
  KEY `INDEX_KEY_IS_TOP` (`IS_TOP`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='说说';

/*Data for the table `talk` */
INSERT INTO talk (ID, CONTENT, IMAGES, STATUS, IS_TOP, DELETED, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3550278505713369088, '声明：博客框架为SpringBoot2.5 + Vue2，大家有Bug和优化提议欢迎提Issue，也可以加入QQ群（760210629）进行交流。项目前端借鉴了《风、宇个人博客》和《ELADMIN》两个开源项目的内容，感谢两个项目的作者！<img src="https://suntaoblog.oss-cn-beijing.aliyuncs.com/emoji/dacall.jpg" width="24" height="24" alt="[打call]" style="margin: 0 1px; vertical-align: text-bottom">', '', 1, 1, 0, 1, 'admin', '2023-01-06 21:39:16', '2023-01-06', 'admin', '2023-01-06 22:11:01');

/*Table structure for table `page` */
DROP TABLE IF EXISTS `page`;
CREATE TABLE `page` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `PAGE_NAME` VARCHAR(20) NOT NULL COMMENT '页面名称',
  `PAGE_LABEL` VARCHAR(50) NOT NULL COMMENT '页面标签',
  `PAGE_COVER` VARCHAR(500) NOT NULL COMMENT '页面封面',
  `PAGE_SORT` INT(11) NOT NULL DEFAULT 99999 COMMENT '页面排序',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='页面配置';

/*Data for the table `page` */
INSERT INTO page (ID, PAGE_NAME, PAGE_LABEL, PAGE_COVER, PAGE_SORT, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3562305820047704064, '404', '404', 'https://suntaoblog.oss-cn-beijing.aliyuncs.com/upload/2023-02/09/3562305813135491072.jpg', 14, 1, 'admin', '2023-02-09 02:11:32', '2023-02-09', 'admin', '2023-02-09 02:11:41');
INSERT INTO page (ID, PAGE_NAME, PAGE_LABEL, PAGE_COVER, PAGE_SORT, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3550320511156224000, '关于我', 'about', 'https://suntaoblog.oss-cn-beijing.aliyuncs.com/upload/2023-01/07/3550320496522297344.jpg', 11, 1, 'admin', '2023-01-07 00:26:11', '2023-01-07', '', '');
INSERT INTO page (ID, PAGE_NAME, PAGE_LABEL, PAGE_COVER, PAGE_SORT, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3550312241301553152, '相册', 'album', 'https://suntaoblog.oss-cn-beijing.aliyuncs.com/upload/2023-01/06/3550312232287993856.jpg', 8, 1, 'admin', '2023-01-06 23:53:19', '2023-01-06', '', '');
INSERT INTO page (ID, PAGE_NAME, PAGE_LABEL, PAGE_COVER, PAGE_SORT, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3550303326471979008, '归档', 'archive', 'https://suntaoblog.oss-cn-beijing.aliyuncs.com/upload/2023-01/06/3550303310193885184.jpg', 2, 1, 'admin', '2023-01-06 23:17:54', '2023-01-06', '', '');
INSERT INTO page (ID, PAGE_NAME, PAGE_LABEL, PAGE_COVER, PAGE_SORT, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3550302122887086080, '文章', 'article', 'https://suntaoblog.oss-cn-beijing.aliyuncs.com/upload/2023-01/06/3550302354764988416.jpg', 6, 1, 'admin', '2023-01-06 23:13:07', '2023-01-06', 'admin', '2023-01-06 23:47:35');
INSERT INTO page (ID, PAGE_NAME, PAGE_LABEL, PAGE_COVER, PAGE_SORT, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3562312827270070272, '文章不存在', 'article404', 'https://suntaoblog.oss-cn-beijing.aliyuncs.com/upload/2023-02/09/3562312800908869632.jpg', 15, 1, 'admin', '2023-02-09 02:39:22', '2023-02-09', '', '');
INSERT INTO page (ID, PAGE_NAME, PAGE_LABEL, PAGE_COVER, PAGE_SORT, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3550302704641245184, '文章列表', 'articles', 'https://suntaoblog.oss-cn-beijing.aliyuncs.com/upload/2023-01/06/3550302692230299648.jpg', 7, 1, 'admin', '2023-01-06 23:15:26', '2023-01-06', 'admin', '2023-01-06 23:47:42');
INSERT INTO page (ID, PAGE_NAME, PAGE_LABEL, PAGE_COVER, PAGE_SORT, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3550263063359782912, '分类', 'category', 'https://suntaoblog.oss-cn-beijing.aliyuncs.com/upload/2023-01/06/3550263046892945408.jpg', 3, 1, 'admin', '2023-01-06 20:37:55', '2023-01-06', 'admin', '2023-01-06 23:46:52');
INSERT INTO page (ID, PAGE_NAME, PAGE_LABEL, PAGE_COVER, PAGE_SORT, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3550263325503782912, '栏目', 'column', 'https://suntaoblog.oss-cn-beijing.aliyuncs.com/upload/2023-01/06/3550263314208522240.jpg', 5, 1, 'admin', '2023-01-06 20:38:57', '2023-01-06', 'admin', '2023-01-06 23:47:20');
INSERT INTO page (ID, PAGE_NAME, PAGE_LABEL, PAGE_COVER, PAGE_SORT, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3563404251524759552, '首页', 'home', 'https://suntaoblog.oss-cn-beijing.aliyuncs.com/upload/2023-02/12/3563404242569920512.jpg', 1, 1, 'admin', '2023-02-12 02:56:18', '2023-02-12', '', '');
INSERT INTO page (ID, PAGE_NAME, PAGE_LABEL, PAGE_COVER, PAGE_SORT, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3550262842852638720, '首页', 'home', 'https://suntaoblog.oss-cn-beijing.aliyuncs.com/upload/2023-02/11/3563300935264370688.jpg', 2, 1, 'admin', '2023-01-06 20:37:02', '2023-01-06', 'admin', '2023-02-12 02:56:24');
INSERT INTO page (ID, PAGE_NAME, PAGE_LABEL, PAGE_COVER, PAGE_SORT, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3563404379195179008, '首页', 'home', 'https://suntaoblog.oss-cn-beijing.aliyuncs.com/upload/2023-02/12/3563404368474537984.jpg', 3, 1, 'admin', '2023-02-12 02:56:48', '2023-02-12', '', '');
INSERT INTO page (ID, PAGE_NAME, PAGE_LABEL, PAGE_COVER, PAGE_SORT, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3550320281232867328, '友链', 'link', 'https://suntaoblog.oss-cn-beijing.aliyuncs.com/upload/2023-02/03/3560430307511369728.png', 10, 1, 'admin', '2023-01-07 00:25:16', '2023-01-07', 'admin', '2023-02-03 21:58:57');
INSERT INTO page (ID, PAGE_NAME, PAGE_LABEL, PAGE_COVER, PAGE_SORT, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3550320794401767424, '留言', 'message', 'https://suntaoblog.oss-cn-beijing.aliyuncs.com/upload/2023-02/11/3563200605436510208.jpg', 12, 1, 'admin', '2023-01-07 00:27:19', '2023-01-07', 'admin', '2023-02-11 13:27:07');
INSERT INTO page (ID, PAGE_NAME, PAGE_LABEL, PAGE_COVER, PAGE_SORT, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3550263198819024896, '标签', 'tag', 'https://suntaoblog.oss-cn-beijing.aliyuncs.com/upload/2023-01/06/3550263180460556288.jpg', 4, 1, 'admin', '2023-01-06 20:38:27', '2023-01-06', 'admin', '2023-01-06 23:46:59');
INSERT INTO page (ID, PAGE_NAME, PAGE_LABEL, PAGE_COVER, PAGE_SORT, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3550312375179542528, '说说', 'talk', 'https://suntaoblog.oss-cn-beijing.aliyuncs.com/upload/2023-01/06/3550312364781862912.jpg', 9, 1, 'admin', '2023-01-06 23:53:51', '2023-01-06', '', '');
INSERT INTO page (ID, PAGE_NAME, PAGE_LABEL, PAGE_COVER, PAGE_SORT, VERSION, CREATE_USER, CREATE_TIME, CREATE_DATE, UPDATE_USER, UPDATE_TIME) VALUES (3560832866961063936, '个人中心', 'user', 'https://suntaoblog.oss-cn-beijing.aliyuncs.com/upload/2023-02/05/3560832853027586048.png', 13, 1, 'admin', '2023-02-05 00:38:32', '2023-02-05', '', '');

/*Table structure for table `album` */
DROP TABLE IF EXISTS `album`;
CREATE TABLE `album` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `ALBUM_NAME` VARCHAR(20) NOT NULL COMMENT '相册名称',
  `ALBUM_DESC` VARCHAR(50) NOT NULL COMMENT '相册描述',
  `ALBUM_COVER` VARCHAR(500) NOT NULL COMMENT '相册封面',
  `STATUS` INT(2) NOT NULL COMMENT '相册状态',
  `DELETED` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '是否删除',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE,
  KEY `KEY_STATUS` (`STATUS`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='相册';

/*Table structure for table `album_photo` */
DROP TABLE IF EXISTS `album_photo`;
CREATE TABLE `album_photo` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `ALBUM_ID` BIGINT(64) NOT NULL COMMENT '所属相册',
  `FILE_ID` BIGINT(64) NOT NULL COMMENT '图片ID',
  `PHOTO_NAME` VARCHAR(20) NOT NULL COMMENT '照片名称',
  `PHOTO_DESC` VARCHAR(100) NOT NULL DEFAULT '' COMMENT '照片描述',
  `PHOTO_LINK` VARCHAR(500) NOT NULL COMMENT '照片地址',
  `IS_DELETED` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '是否删除',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE,
  KEY `KEY_DELETED` (`IS_DELETED`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='照片';

/*Table structure for table `message` */
DROP TABLE IF EXISTS `message`;
CREATE TABLE `message` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `IP_ADDRESS` VARCHAR(255) NOT NULL DEFAULT '' COMMENT '用户IP',
  `IP_SOURCE` VARCHAR(255) NOT NULL DEFAULT '' COMMENT '用户来源',
  `NICKNAME` VARCHAR(255) NOT NULL COMMENT '用户昵称',
  `AVATAR` VARCHAR(255) NOT NULL COMMENT '用户头像',
  `MESSAGE_CONTENT` VARCHAR(255) NOT NULL COMMENT '弹幕内容',
  `TIME` TINYINT(1) NULL DEFAULT NULL COMMENT '弹幕速度',
  `IS_REVIEW` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '是否审核',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='留言';

/*Table structure for table `comment` */
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `USER_ID` BIGINT(64) NOT NULL COMMENT '评论用户',
  `REPLY_USER_ID` BIGINT(64) NULL DEFAULT NULL COMMENT '回复用户',
  `REPLY_COMMENT_ID` BIGINT(64) NULL DEFAULT NULL COMMENT '回复那条评论',
  `PARENT_ID` BIGINT(64) NULL DEFAULT NULL COMMENT '上级节点',
  `OBJECT_ID` BIGINT(64) NULL DEFAULT NULL COMMENT '评论对象',
  `CONTENT` TEXT NOT NULL COMMENT '评论内容',
  `TYPE` TINYINT(1) NOT NULL COMMENT '评论类型',
  `IP_ADDRESS` VARCHAR(255) NOT NULL DEFAULT '' COMMENT '评论用户IP',
  `IP_SOURCE` VARCHAR(255) NOT NULL DEFAULT '' COMMENT '评论用户来源',
  `IS_REVIEW` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '是否审核',
  `DELETED` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '是否删除',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='评论';

/*Table structure for table `comment_like` */
DROP TABLE IF EXISTS `comment_like`;
CREATE TABLE `comment_like` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `USER_ID` BIGINT(64) NOT NULL COMMENT '点赞用户',
  `COMMENT_ID` BIGINT(64) NULL DEFAULT NULL COMMENT '点赞评论',
  `IP_ADDRESS` VARCHAR(255) NOT NULL DEFAULT '' COMMENT '点赞用户IP',
  `IP_SOURCE` VARCHAR(255) NOT NULL DEFAULT '' COMMENT '点赞用户来源',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE,
  UNIQUE KEY `KEY_USER_ID_COMMENT_ID` (`USER_ID`, `COMMENT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='评论点赞信息';

/*Table structure for table `talk_like` */
DROP TABLE IF EXISTS `talk_like`;
CREATE TABLE `talk_like` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `USER_ID` BIGINT(64) NOT NULL COMMENT '点赞用户',
  `TALK_ID` BIGINT(64) NULL DEFAULT NULL COMMENT '点赞说说',
  `IP_ADDRESS` VARCHAR(255) NOT NULL DEFAULT '' COMMENT '点赞用户IP',
  `IP_SOURCE` VARCHAR(255) NOT NULL DEFAULT '' COMMENT '点赞用户来源',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE,
  UNIQUE KEY `KEY_USER_ID_TALK_ID` (`USER_ID`, `TALK_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='说说点赞信息';

/*Table structure for table `article_like` */
DROP TABLE IF EXISTS `article_like`;
CREATE TABLE `article_like` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `USER_ID` BIGINT(64) NOT NULL COMMENT '点赞用户',
  `ARTICLE_ID` BIGINT(64) NULL DEFAULT NULL COMMENT '点赞文章',
  `IP_ADDRESS` VARCHAR(255) NOT NULL DEFAULT '' COMMENT '点赞用户IP',
  `IP_SOURCE` VARCHAR(255) NOT NULL DEFAULT '' COMMENT '点赞用户来源',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE,
  UNIQUE KEY `KEY_USER_ID_ARTICLE_ID` (`USER_ID`, `ARTICLE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='文章点赞记录';

/*Table structure for table `article_view` */
DROP TABLE IF EXISTS `article_view`;
CREATE TABLE `article_view` (
  `ID` BIGINT(64) UNSIGNED NOT NULL,
  `ARTICLE_ID` BIGINT(64) NOT NULL COMMENT '文章编号',
  `ACCESS_IP` VARCHAR(200) NOT NULL COMMENT '访问IP',
  `ACCESS_ADDRESS` VARCHAR(500) NOT NULL DEFAULT '' COMMENT '访问地址',
  `ACCESS_TIME` VARCHAR(50) NOT NULL COMMENT '访问时间',
  `VERSION` INT(11) NOT NULL DEFAULT 1 COMMENT '乐观锁',
  `CREATE_USER` VARCHAR(20) NOT NULL COMMENT '创建用户',
  `CREATE_TIME` VARCHAR(20) NOT NULL COMMENT '创建时间',
  `CREATE_DATE` VARCHAR(20) NOT NULL COMMENT '创建日期',
  `UPDATE_USER` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新用户',
  `UPDATE_TIME` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '更新时间',
  PRIMARY KEY (`ID`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='文章浏览记录';