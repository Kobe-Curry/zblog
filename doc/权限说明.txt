1、涉及的表
user, role, permission, router, interface
中间表：

2、关联关系
用户（user） - 角色（role）：多对多的关系，一个用户可以对应多个角色，多个角色同时生效（不存在默认/激活角色）
    关联字段：userId 和 roleId
角色（role） - 权限（permission）：多对多的关系，一个角色对应多个权限
    关联字段：roleId 和 permissionId
权限（permission） - 路由（router）：一对一的关系，一个按钮级别的权限对应一个路由
    关联字段：权限编码
路由（router） - 接口（interface）：一对多的关系，一个路由可能对应多个请求地址（一般是一个）
    关联字段：权限编码

3、基本链路
request -> obtain requestUri, requestMethod -> interface（未查询到则请求失败） -> obtain permCode
-> obtain permission -> 判断用户的角色是否允许访问该权限，不允许则请求失败

4、特殊规则
a: 路由纳管规则，如果路由在权限表中有记录，则被纳管，否则未纳管
b: 路由访问级别，纳管的路由，已 permission 为准，未纳管的路由，已 router 为准
    OPEN，放行
    PUBLIC，判断用户是否认证，未认证则提示用户需要登录
    PERM，获取用户对应的权限列表，如果包含该权限则放行，否则抛出异常，没有权限（实际就是走 3 的流程）
c: 登录接口的规则是 OPEN

5、开发规范
a: 暂不支持不建议使用PathVariable开发，如果有需要，需要定制代码
b: 接口需要使用@Router注解才可生效，否则默认该接口不允许访问

6、完整流程：JWT校验规则
a: 发起请求，后端获取 requestUri 和 requestMethod，如果在接口表中不存在，则
b:
c:
d:
e:
f:
...

7、备注
